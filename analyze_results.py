#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ RL-–æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∏–±–µ—Ä–ø–∞–Ω–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from collections import defaultdict

def analyze_training_results(csv_file='analysis_log.csv'):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv(csv_file, header=None, names=[
        'episode_id', 'stage', 'result', 'reward', 'steps', 'trace',
        'program_counts', 'avg_levels', 'enemies_killed', 'total_dp', 'total_cpu'
    ])
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
    print(f"–í—Å–µ–≥–æ —ç–ø–∏–∑–æ–¥–æ–≤: {len(df)}")
    print(f"–≠—Ç–∞–ø—ã –æ–±—É—á–µ–Ω–∏—è: {df['stage'].unique()}")
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º
    for stage in sorted(df['stage'].unique()):
        stage_data = df[df['stage'] == stage]
        wins = len(stage_data[stage_data['result'] == 'win'])
        losses = len(stage_data[stage_data['result'] == 'loss_or_timeout'])
        
        print(f"üéØ –≠—Ç–∞–ø {stage}:")
        print(f"   –≠–ø–∏–∑–æ–¥–æ–≤: {len(stage_data)}")
        print(f"   –ü–æ–±–µ–¥: {wins} ({wins/len(stage_data)*100:.1f}%)")
        print(f"   –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses} ({losses/len(stage_data)*100:.1f}%)")
        print(f"   –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {stage_data['reward'].mean():.2f}")
        print(f"   –°—Ä–µ–¥–Ω–∏–µ —à–∞–≥–∏: {stage_data['steps'].mean():.1f}")
        print()
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    print("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:")
    
    # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞–≥—Ä–∞–¥
    window_size = 50
    rewards = df['reward'].values
    moving_avg = []
    
    for i in range(len(rewards)):
        start = max(0, i - window_size + 1)
        moving_avg.append(rewards[start:i+1].mean())
    
    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    best_rewards = df.nlargest(5, 'reward')[['stage', 'reward', 'steps', 'result']]
    print("\nüèÜ –¢–æ–ø-5 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print(best_rewards.to_string(index=False))
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
    print(f"\nüí∞ –ê–Ω–∞–ª–∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤:")
    print(f"–°—Ä–µ–¥–Ω–∏–π DP: {df['total_dp'].mean():.1f}")
    print(f"–°—Ä–µ–¥–Ω–∏–π CPU: {df['total_cpu'].mean():.1f}")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    create_visualizations(df, moving_avg)
    
    return df

def create_visualizations(df, moving_avg):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ RL-–æ–±—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–ø–∞–Ω–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', fontsize=16)
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ù–∞–≥—Ä–∞–¥—ã –ø–æ —ç–ø–∏–∑–æ–¥–∞–º
    axes[0, 0].plot(df['reward'], alpha=0.6, label='–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —ç–ø–∏–∑–æ–¥')
    axes[0, 0].plot(moving_avg, 'r-', linewidth=2, label=f'–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ ({50} —ç–ø–∏–∑–æ–¥–æ–≤)')
    axes[0, 0].set_title('–ù–∞–≥—Ä–∞–¥—ã –ø–æ —ç–ø–∏–∑–æ–¥–∞–º')
    axes[0, 0].set_xlabel('–≠–ø–∏–∑–æ–¥')
    axes[0, 0].set_ylabel('–ù–∞–≥—Ä–∞–¥–∞')
    axes[0, 0].legend()
    axes[0, 0].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –®–∞–≥–∏ –ø–æ —ç–ø–∏–∑–æ–¥–∞–º
    axes[0, 1].plot(df['steps'], alpha=0.6, color='green')
    axes[0, 1].set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –ø–æ —ç–ø–∏–∑–æ–¥–∞–º')
    axes[0, 1].set_xlabel('–≠–ø–∏–∑–æ–¥')
    axes[0, 1].set_ylabel('–®–∞–≥–∏')
    axes[0, 1].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
    axes[1, 0].hist(df['reward'], bins=30, alpha=0.7, color='orange')
    axes[1, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥')
    axes[1, 0].set_xlabel('–ù–∞–≥—Ä–∞–¥–∞')
    axes[1, 0].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    axes[1, 0].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
    stage_results = df.groupby(['stage', 'result']).size().unstack(fill_value=0)
    stage_results.plot(kind='bar', ax=axes[1, 1])
    axes[1, 1].set_title('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º –æ–±—É—á–µ–Ω–∏—è')
    axes[1, 1].set_xlabel('–≠—Ç–∞–ø')
    axes[1, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤')
    axes[1, 1].legend()
    axes[1, 1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('training_analysis.png', dpi=300, bbox_inches='tight')
    print(f"\nüìä –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'training_analysis.png'")
    plt.show()

def detailed_episode_analysis(df, episode_id=None):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞"""
    
    if episode_id is None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç–ø–∏–∑–æ–¥—ã
        print("\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —ç–ø–∏–∑–æ–¥–æ–≤:")
        recent = df.tail(5)[['episode_id', 'stage', 'result', 'reward', 'steps']]
        print(recent.to_string(index=False))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ —ç–ø–∏–∑–æ–¥—ã
        print("\nüèÜ –õ—É—á—à–∏–µ —ç–ø–∏–∑–æ–¥—ã:")
        best = df.nlargest(3, 'reward')[['episode_id', 'stage', 'result', 'reward', 'steps']]
        print(best.to_string(index=False))
    else:
        episode = df[df['episode_id'] == episode_id]
        if len(episode) > 0:
            print(f"\nüîç –î–µ—Ç–∞–ª–∏ —ç–ø–∏–∑–æ–¥–∞ {episode_id}:")
            print(episode.to_string(index=False))
        else:
            print(f"–≠–ø–∏–∑–æ–¥ {episode_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    try:
        df = analyze_training_results()
        detailed_episode_analysis(df)
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìÅ –§–∞–π–ª—ã:")
        print(f"   - analysis_log.csv: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   - training_analysis.png: –≥—Ä–∞—Ñ–∏–∫–∏")
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª analysis_log.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ train.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}") 