#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ–±—É—á–µ–Ω–Ω–æ–π RL-–º–æ–¥–µ–ª–∏
"""

import gymnasium as gym
from stable_baselines3 import PPO
from network_echo_env import NetworkEchoEnv
import time

def demo_model(model_path='ppo_networkecho.zip', episodes=3):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    
    print("üéÆ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    env = NetworkEchoEnv()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        model = PPO.load(model_path)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {model_path}")
        
        for episode in range(episodes):
            print(f"\nüéØ –≠–ø–∏–∑–æ–¥ {episode + 1}/{episodes}")
            print("-" * 30)
            
            obs, info = env.reset()
            total_reward = 0
            step = 0
            
            while True:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏
                action, _states = model.predict(obs, deterministic=True)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                obs, reward, terminated, truncated, info = env.step(action)
                total_reward += reward
                step += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if step % 100 == 0 or terminated or truncated:
                    print(f"   –®–∞–≥ {step}: –Ω–∞–≥—Ä–∞–¥–∞={reward:.2f}, –æ–±—â–∞—è={total_reward:.2f}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if 'stats' in info:
                        stats = info['stats']
                        if stats:
                            print(f"     –†–µ—Å—É—Ä—Å—ã: DP={stats.get('total_dp', 0)}, CPU={stats.get('total_cpu', 0)}")
                            print(f"     –ü—Ä–æ–≥—Ä–∞–º–º—ã: {stats.get('program_counts', {})}")
                            print(f"     –£–±–∏—Ç–æ –≤—Ä–∞–≥–æ–≤: {stats.get('enemies_killed', 0)}")
                
                if terminated or truncated:
                    result = "–ü–æ–±–µ–¥–∞! üèÜ" if terminated and reward > 0 else "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ ‚ùå"
                    print(f"   {result} (—à–∞–≥–æ–≤: {step}, –æ–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {total_reward:.2f})")
                    break
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                time.sleep(0.01)
        
        print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except FileNotFoundError:
        print(f"‚ùå –ú–æ–¥–µ–ª—å {model_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ train.py –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    finally:
        env.close()

def compare_models():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    
    models = [
        ('ppo_economy_trained.zip', '–≠–∫–æ–Ω–æ–º–∏–∫–∞'),
        ('ppo_defense_trained.zip', '–û–±–æ—Ä–æ–Ω–∞'),
        ('ppo_networkecho.zip', '–ü–æ–ª–Ω–∞—è –∏–≥—Ä–∞')
    ]
    
    print("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    print("=" * 50)
    
    for model_path, model_name in models:
        try:
            model = PPO.load(model_path)
            print(f"‚úÖ {model_name}: {model_path}")
        except FileNotFoundError:
            print(f"‚ùå {model_name}: {model_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå {model_name}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")

def interactive_demo():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏"""
    
    print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 50)
    
    models = [
        ('ppo_economy_trained.zip', '–≠–∫–æ–Ω–æ–º–∏–∫–∞'),
        ('ppo_defense_trained.zip', '–û–±–æ—Ä–æ–Ω–∞'),
        ('ppo_networkecho.zip', '–ü–æ–ª–Ω–∞—è –∏–≥—Ä–∞')
    ]
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for i, (path, name) in enumerate(models):
        print(f"  {i+1}. {name} ({path})")
    
    try:
        choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (1-3): ")) - 1
        if 0 <= choice < len(models):
            model_path, model_name = models[choice]
            episodes = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ (1-10): "))
            episodes = max(1, min(10, episodes))
            
            print(f"\nüéØ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {model_name}")
            demo_model(model_path, episodes)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    except KeyboardInterrupt:
        print("\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == 'compare':
            compare_models()
        elif sys.argv[1] == 'interactive':
            interactive_demo()
        else:
            demo_model(sys.argv[1])
    else:
        demo_model() 