#!/usr/bin/env python3
"""
–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–Ω–∏–∂–µ–Ω–∏—è trace level –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –Ω–æ–¥
"""

import json
import subprocess
import time

class GameEngineProcess:
    def __init__(self):
        self.process = subprocess.Popen(
            ['node', 'game_engine_headless.js'],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        time.sleep(0.1)
    
    def send_command(self, command):
        self.process.stdin.write(json.dumps(command) + '\n')
        self.process.stdin.flush()
        response = self.process.stdout.readline()
        return json.loads(response)
    
    def close(self):
        self.process.terminate()
        self.process.wait()

def test_trace_reduction_short():
    print("=== –¢–µ—Å—Ç —Å–Ω–∏–∂–µ–Ω–∏—è trace level –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –Ω–æ–¥ ===")
    
    engine = GameEngineProcess()
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
        result = engine.send_command({'cmd': 'reset'})
        initial_trace = result['stats']['traceLevel']
        print(f"–ù–∞—á–∞–ª—å–Ω—ã–π trace level: {initial_trace}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        result = engine.send_command({'cmd': 'get_available_actions'})
        available_actions = result.get('available_actions', [])
        
        # –ò—â–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞—Ö–≤–∞—Ç–∞
        capture_actions = [a for a in available_actions if a.get('action') == 'capture']
        if not capture_actions:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∑–∞—Ö–≤–∞—Ç–∞!")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–æ–¥—É –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
        target_node = capture_actions[0]['targetNodeId']
        print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç –Ω–æ–¥—ã {target_node}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞—Ö–≤–∞—Ç
        result = engine.send_command({
            'cmd': 'step',
            'actions': [{'action': 'capture', 'targetNodeId': target_node}]
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞—Ö–≤–∞—Ç–∞
        stats = result['newState']['stats']
        trace_after_capture = stats['traceLevel']
        player_nodes = stats['playerNodes']
        
        print(f"üìä –ü–æ—Å–ª–µ –∑–∞—Ö–≤–∞—Ç–∞:")
        print(f"   Trace level: {trace_after_capture}")
        print(f"   –ù–æ–¥—ã –∏–≥—Ä–æ–∫–∞: {player_nodes}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ trace level —Å–Ω–∏–∑–∏–ª—Å—è
        if trace_after_capture < initial_trace + 5:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º +5
            print("‚úÖ Trace level —Å–Ω–∏–∑–∏–ª—Å—è –ø–æ—Å–ª–µ –∑–∞—Ö–≤–∞—Ç–∞!")
        else:
            print("‚ùå Trace level –Ω–µ —Å–Ω–∏–∑–∏–ª—Å—è")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤
        for step in range(5):
            result = engine.send_command({'cmd': 'get_available_actions'})
            available_actions = result.get('available_actions', [])
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            if available_actions:
                action = available_actions[0]
                result = engine.send_command({
                    'cmd': 'step',
                    'actions': [action]
                })
                
                stats = result['newState']['stats']
                print(f"–®–∞–≥ {step+1}: Trace={stats['traceLevel']:.4f}, Nodes={stats['playerNodes']}")
        
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    finally:
        engine.close()

if __name__ == "__main__":
    test_trace_reduction_short() 