#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –ª–µ–≥–∫–æ–π –º–æ–¥–µ–ª–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç NetworkEchoEnvLight –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import os
import sys
import json
import numpy as np
from stable_baselines3 import PPO
from network_echo_env_light import NetworkEchoEnvLight
import matplotlib.pyplot as plt
import time

def demo_light_model(model_path, episodes=3, interactive=False):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å"""
    print(f"ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –õ–ï–ì–ö–û–ô –ú–û–î–ï–õ–ò")
    print("=" * 50)
    print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {model_path}")
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    env = NetworkEchoEnvLight(log_actions=True, log_path="demo_light_actions.jsonl")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    try:
        model = PPO.load(model_path)
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    model.set_env(env)
    
    print(f"üéÆ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è {episodes} —ç–ø–∏–∑–æ–¥–æ–≤...")
    print()
    
    episode_rewards = []
    episode_lengths = []
    action_counts = {}
    
    for episode in range(episodes):
        print(f"üéØ –≠–ü–ò–ó–û–î {episode + 1}/{episodes}")
        print("-" * 30)
        
        obs, info = env.reset()
        done = False
        truncated = False
        total_reward = 0
        step_count = 0
        episode_actions = []
        
        while not (done or truncated):
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏
            action, _states = model.predict(obs, deterministic=True)
            episode_actions.append(action)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            obs, reward, done, truncated, info = env.step(action)
            total_reward += reward
            step_count += 1
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ
            if step_count % 50 == 0:
                print(f"  –®–∞–≥ {step_count}: –Ω–∞–≥—Ä–∞–¥–∞ = {reward:.3f}, –æ–±—â–∞—è = {total_reward:.3f}")
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            if interactive:
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞...")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ø–∏–∑–æ–¥–∞
        episode_rewards.append(total_reward)
        episode_lengths.append(step_count)
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π
        for action in episode_actions:
            action_name = env._actions[action]
            action_counts[action_name] = action_counts.get(action_name, 0) + 1
        
        print(f"üèÅ –≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"  üìä –®–∞–≥–æ–≤: {step_count}")
        print(f"  üéØ –û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {total_reward:.3f}")
        print(f"  üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —à–∞–≥: {total_reward/step_count:.3f}")
        print()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    env.close()
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 30)
    print(f"üéÆ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {np.mean(episode_rewards):.3f}")
    print(f"üìà –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: {np.mean(episode_lengths):.1f}")
    print(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {np.min(episode_rewards):.3f}")
    print(f"üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {np.max(episode_rewards):.3f}")
    print()
    
    print("üéÆ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô:")
    total_actions = sum(action_counts.values())
    for action, count in sorted(action_counts.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / total_actions) * 100
        print(f"  {action}: {count} ({percentage:.1f}%)")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    create_demo_visualization(episode_rewards, episode_lengths, action_counts)

def create_demo_visualization(rewards, lengths, actions):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
    
    # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–≥—Ä–∞–¥
    ax1.plot(rewards, 'b-o', linewidth=2, markersize=8)
    ax1.set_title('–ù–∞–≥—Ä–∞–¥—ã –ø–æ —ç–ø–∏–∑–æ–¥–∞–º', fontsize=14, fontweight='bold')
    ax1.set_xlabel('–≠–ø–∏–∑–æ–¥')
    ax1.set_ylabel('–ù–∞–≥—Ä–∞–¥–∞')
    ax1.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ –¥–ª–∏–Ω—ã —ç–ø–∏–∑–æ–¥–æ–≤
    ax2.plot(lengths, 'g-o', linewidth=2, markersize=8)
    ax2.set_title('–î–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–æ–≤', fontsize=14, fontweight='bold')
    ax2.set_xlabel('–≠–ø–∏–∑–æ–¥')
    ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤')
    ax2.grid(True, alpha=0.3)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
    action_names = list(actions.keys())
    action_counts = list(actions.values())
    colors = plt.cm.Set3(np.linspace(0, 1, len(action_names)))
    
    ax3.pie(action_counts, labels=action_names, autopct='%1.1f%%', 
             colors=colors, startangle=90)
    ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π', fontsize=14, fontweight='bold')
    
    # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–µ–π—Å—Ç–≤–∏–π
    bars = ax4.bar(action_names, action_counts, color=colors)
    ax4.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π', fontsize=14, fontweight='bold')
    ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    ax4.tick_params(axis='x', rotation=45)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar in bars:
        height = bar.get_height()
        ax4.text(bar.get_x() + bar.get_width()/2., height,
                f'{int(height)}', ha='center', va='bottom')
    
    plt.tight_layout()
    plt.savefig('demo_light_results.png', dpi=300, bbox_inches='tight')
    print("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: demo_light_results.png")
    plt.show()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –õ–ï–ì–ö–û–ô –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    model_files = []
    for file in os.listdir('.'):
        if file.endswith('.zip') and 'light' in file:
            model_files.append(file)
    
    if not model_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ª–µ–≥–∫–∏–µ –º–æ–¥–µ–ª–∏ (.zip —Ñ–∞–π–ª—ã —Å 'light' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)")
        return
    
    print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–≥–∫–∏–µ –º–æ–¥–µ–ª–∏:")
    for i, model in enumerate(model_files, 1):
        print(f"  {i}. {model}")
    
    try:
        choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (–Ω–æ–º–µ—Ä): ")) - 1
        if 0 <= choice < len(model_files):
            model_path = model_files[choice]
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        return
    
    print("\n–†–µ–∂–∏–º—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
    print("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è (3 —ç–ø–∏–∑–æ–¥–∞)")
    print("2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è (1 —ç–ø–∏–∑–æ–¥)")
    print("3. –í—ã—Ö–æ–¥")
    
    try:
        mode = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): "))
        if mode == 1:
            demo_light_model(model_path, episodes=3, interactive=False)
        elif mode == 2:
            demo_light_model(model_path, episodes=1, interactive=True)
        elif mode == 3:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

if __name__ == "__main__":
    main() 