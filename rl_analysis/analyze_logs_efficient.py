#!/usr/bin/env python3
"""
–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–≥—Ä–æ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å
"""

import json
import os
from collections import Counter
import sys

def analyze_logs_efficient(log_file):
    """–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞"""
    print(f"üîç –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {log_file}")
    print("=" * 60)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞
    file_size = os.path.getsize(log_file) / (1024 * 1024 * 1024)  # GB
    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} GB")
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å
    print("‚è≥ –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏...")
    with open(log_file, 'r') as f:
        total_lines = sum(1 for _ in f)
    
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {total_lines:,}")
    print(f"üìè –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {file_size * 1024 * 1024 * 1024 / total_lines:.0f} –±–∞–π—Ç")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    print(f"\nüìã –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
    
    print(f"\nüî∏ –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏:")
    with open(log_file, 'r') as f:
        for i in range(3):
            line = f.readline()
            if not line:
                break
            try:
                data = json.loads(line)
                episode = data.get('episode', 'N/A')
                step = data.get('step', 'N/A')
                action = data.get('chosen_action', {}).get('action', 'N/A')
                print(f"  {i+1}. –≠–ø–∏–∑–æ–¥ {episode}, –®–∞–≥ {step}, –î–µ–π—Å—Ç–≤–∏–µ: {action}")
            except:
                print(f"  {i+1}. –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
    print(f"\nüî∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏:")
    with open(log_file, 'r') as f:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ü—É —Ñ–∞–π–ª–∞
        f.seek(0, 2)
        file_size_bytes = f.tell()
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100KB –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
        chunk_size = 100 * 1024
        f.seek(max(0, file_size_bytes - chunk_size))
        chunk = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        lines = chunk.split('\n')
        last_lines = [line for line in lines if line.strip()][-3:]
        
        for i, line in enumerate(last_lines):
            try:
                data = json.loads(line)
                episode = data.get('episode', 'N/A')
                step = data.get('step', 'N/A')
                action = data.get('chosen_action', {}).get('action', 'N/A')
                print(f"  {len(last_lines)-i}. –≠–ø–∏–∑–æ–¥ {episode}, –®–∞–≥ {step}, –î–µ–π—Å—Ç–≤–∏–µ: {action}")
            except:
                print(f"  {len(last_lines)-i}. –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–≤—ã–±–æ—Ä–æ—á–Ω–æ):")
    
    episodes = set()
    actions = Counter()
    steps_per_episode = {}
    
    print("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ (–∫–∞–∂–¥–∞—è 1000-—è)...")
    with open(log_file, 'r') as f:
        for i, line in enumerate(f):
            if i % 1000 == 0:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é 1000-—é –∑–∞–ø–∏—Å—å
                try:
                    data = json.loads(line)
                    episode = data.get('episode', 0)
                    step = data.get('step', 0)
                    action = data.get('chosen_action', {}).get('action', 'unknown')
                    
                    episodes.add(episode)
                    actions[action] += 1
                    steps_per_episode[episode] = max(steps_per_episode.get(episode, 0), step)
                    
                except json.JSONDecodeError:
                    continue
                except Exception as e:
                    if i < 1000:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏
                        print(f"  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}: {e}")
                    continue
            
            if i % 10000 == 0:
                print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i:,} —Å—Ç—Ä–æ–∫...")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ (–≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ):")
    print(f"  üéÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {len(episodes)}")
    print(f"  üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: {sum(actions.values()):,}")
    if steps_per_episode:
        avg_steps = sum(steps_per_episode.values()) / len(steps_per_episode)
        print(f"  üìä –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: {avg_steps:.0f} —à–∞–≥–æ–≤")
    
    print(f"\nüéØ –¢–æ–ø-10 –¥–µ–π—Å—Ç–≤–∏–π:")
    for action, count in actions.most_common(10):
        percentage = count / sum(actions.values()) * 100
        print(f"  {action}: {count:,} ({percentage:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüíæ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
    
    # –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ (–∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
    with open(log_file, 'r') as f:
        first_line = f.readline()
        if first_line:
            sample_size = len(first_line.encode('utf-8'))
            print(f"  üìè –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏: ~{sample_size:,} –±–∞–π—Ç")
            print(f"  üìä –†–∞–∑–º–µ—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: ~{sample_size * total_lines / (1024*1024*1024):.2f} GB")
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–º–µ—Ä–æ–º
    print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–º–µ—Ä–æ–º:")
    print(f"  üî¥ –ö–∞–∂–¥—ã–π —à–∞–≥ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é")
    print(f"  üî¥ –ü–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏")
    print(f"  üî¥ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏")
    print(f"  üî¥ {total_lines:,} –∑–∞–ø–∏—Å–µ–π √ó ~70KB = ~{total_lines * 70 / (1024*1024):.1f} GB")
    
    # –ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –ª–æ–≥–∏ –æ–± –∏–≥—Ä–µ
    print(f"\nüéÆ –ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –ª–æ–≥–∏ –æ–± –∏–≥—Ä–µ:")
    print(f"  üìä –ò–≥—Ä–∞ –∏–º–µ–µ—Ç —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    print(f"  üéØ –ú–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–∑–∞—Ö–≤–∞—Ç, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)")
    print(f"  üîÑ –≠–ø–∏–∑–æ–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º–∏ (–º–Ω–æ–≥–æ —à–∞–≥–æ–≤)")
    print(f"  üìà –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —ç–ø–∏–∑–æ–¥–æ–≤")
    print(f"  üíæ –ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print(f"  ‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (max 50,000)")
    print(f"  ‚úÖ –°–∂–∏–º–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    print(f"  ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    print(f"  ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    print(f"  ‚úÖ –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤")
    print(f"  ‚úÖ –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –æ–±—É—á–µ–Ω–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    log_file = "actions_log.jsonl"
    
    if not os.path.exists(log_file):
        print(f"‚ùå –§–∞–π–ª {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    analyze_logs_efficient(log_file)

if __name__ == "__main__":
    main() 