#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–∏
"""

import json
import subprocess
import pickle
import os
import random
import numpy as np
from evolution_agent import EvolutionAgent, GameState

def test_network_growth_strategy(games_count: int = 5):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–∏"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–∏")
    print(f"üéÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {games_count}")
    print("-" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
    try:
        with open('best_agent.pkl', 'rb') as f:
            agent = pickle.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª best_agent.pkl –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞.")
        return
    
    game_results = []
    
    for game_num in range(1, games_count + 1):
        print(f"üéØ –ò–≥—Ä–∞ {game_num}/{games_count}")
        try:
            reward, win, stats, network_analysis = play_single_game_with_network_analysis(agent)
            
            result = {
                'game': game_num,
                'score': reward,
                'win': win,
                'stats': stats,
                'network_analysis': network_analysis
            }
            game_results.append(result)
            
            status = "–ü–û–ë–ï–î–ê" if win else "–ü–û–†–ê–ñ–ï–ù–ò–ï"
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
            print(f"   –°—á–µ—Ç: {reward:.2f}")
            print(f"   DP: {stats.get('dp', 0)}")
            print(f"   CPU: {stats.get('cpu', 0)}")
            print(f"   –ù–æ–¥—ã –∏–≥—Ä–æ–∫–∞: {stats.get('playerNodes', 0)}")
            print(f"   Trace Level: {stats.get('traceLevel', 0):.1f}")
            print(f"   –°–≤—è–∑–Ω–æ—Å—Ç—å —Å–µ—Ç–∏: {network_analysis['connectivity']:.2f}")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {network_analysis['avg_distance']:.2f}")
            print()
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ: {e}")
            print()
    
    if not game_results:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    wins = sum(1 for r in game_results if r['win'])
    avg_score = sum(r['score'] for r in game_results) / len(game_results)
    avg_connectivity = sum(r['network_analysis']['connectivity'] for r in game_results) / len(game_results)
    avg_distance = sum(r['network_analysis']['avg_distance'] for r in game_results) / len(game_results)
    
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–¢–ò:")
    print(f"   –ü–æ–±–µ–¥: {wins}/{len(game_results)} ({wins/len(game_results)*100:.1f}%)")
    print(f"   –°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç: {avg_score:.2f}")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Å–≤—è–∑–Ω–æ—Å—Ç—å: {avg_connectivity:.2f}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {avg_distance:.2f}")
    print()

def play_single_game_with_network_analysis(agent: EvolutionAgent) -> tuple:
    """–°—ã–≥—Ä–∞—Ç—å –æ–¥–Ω—É –∏–≥—Ä—É —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–∏"""
    
    process = subprocess.Popen(
        ['node', 'game_engine_headless.js'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    
    try:
        reset_cmd = json.dumps({'cmd': 'reset'}) + '\n'
        process.stdin.write(reset_cmd)
        process.stdin.flush()
        
        response = process.stdout.readline()
        game_state = GameState(json.loads(response))
        
        total_reward = 0.0
        steps = 0
        max_steps = 1000
        network_history = []
        
        while not game_state.done and steps < max_steps:
            actions_cmd = json.dumps({'cmd': 'get_actions'}) + '\n'
            process.stdin.write(actions_cmd)
            process.stdin.flush()
            
            response = process.stdout.readline()
            available_actions = json.loads(response)['actions']
            
            if not available_actions:
                break
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏
            network_analysis = analyze_network_state(game_state)
            network_history.append(network_analysis)
            
            if steps % 10 == 0:
                print(f"   –®–∞–≥ {steps+1}: –ù–æ–¥—ã={game_state.stats.get('playerNodes', 0)}, "
                      f"–°–≤—è–∑–Ω–æ—Å—Ç—å={network_analysis['connectivity']:.2f}, "
                      f"–°—Ä.—Ä–∞—Å—Å—Ç={network_analysis['avg_distance']:.2f}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
            actions = select_actions_with_network_focus(agent, game_state, available_actions)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–≤–∏–∂–æ–∫
            action_cmd = json.dumps({'cmd': 'step', 'actions': actions}) + '\n'
            process.stdin.write(action_cmd)
            process.stdin.flush()
            
            response = process.stdout.readline()
            result = json.loads(response)
            game_state = GameState(result['newState'])
            total_reward += result.get('reward', 0)
            
            steps += 1
        
        if game_state.win:
            total_reward += 1000
        elif game_state.done and not game_state.win:
            total_reward -= 500
        
        stats = game_state.stats
        total_reward += stats.get('dp', 0) * 0.1
        total_reward += stats.get('playerNodes', 0) * 10
        total_reward -= stats.get('traceLevel', 0) * 0.5
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ç–∏
        final_network_analysis = analyze_network_state(game_state)
        
        process.terminate()
        return total_reward, game_state.win, stats, final_network_analysis
    except Exception as e:
        process.terminate()
        raise e

def analyze_network_state(game_state: GameState) -> dict:
    """–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏"""
    nodes = game_state.nodes
    player_nodes = [node_id for node_id, node_data in nodes.items() 
                   if node_data.get('owner') == 'player']
    
    if not player_nodes:
        return {'connectivity': 0.0, 'avg_distance': 0.0, 'hub_distance': 0.0}
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–≤—è–∑–Ω–æ—Å—Ç—å (—Å–∫–æ–ª—å–∫–æ –Ω–æ–¥ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å hub)
    connected_to_hub = 0
    total_distance = 0
    
    for node_id in player_nodes:
        if node_id == 'hub':
            connected_to_hub += 1
            total_distance += 0
        else:
            distance = calculate_distance_from_hub(node_id, nodes)
            if distance < 999:  # –ù–æ–¥–∞ –¥–æ—Å—Ç–∏–∂–∏–º–∞
                connected_to_hub += 1
                total_distance += distance
    
    connectivity = connected_to_hub / len(player_nodes) if player_nodes else 0.0
    avg_distance = total_distance / len(player_nodes) if player_nodes else 0.0
    
    return {
        'connectivity': connectivity,
        'avg_distance': avg_distance,
        'player_nodes': len(player_nodes)
    }

def calculate_distance_from_hub(node_id: str, nodes: dict) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç hub –¥–æ –Ω–æ–¥—ã"""
    if node_id == 'hub':
        return 0
    
    # –ü—Ä–æ—Å—Ç–æ–π BFS –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏
    visited = set()
    queue = [('hub', 0)]
    
    while queue:
        current_node, distance = queue.pop(0)
        
        if current_node == node_id:
            return distance
        
        if current_node in visited:
            continue
            
        visited.add(current_node)
        current_node_data = nodes.get(current_node, {})
        neighbors = current_node_data.get('neighbors', [])
        
        for neighbor in neighbors:
            if neighbor not in visited:
                queue.append((neighbor, distance + 1))
    
    return 999  # –ù–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞—è –Ω–æ–¥–∞

def evaluate_node_for_network_growth(node_id: str, node_data: dict, nodes: dict, player_nodes: list) -> float:
    """
    –û—Ü–µ–Ω–∫–∞ –Ω–æ–¥—ã –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 100
    """
    score = 0.0
    
    # 1. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç hub (—á–µ–º –±–ª–∏–∂–µ, —Ç–µ–º –ª—É—á—à–µ)
    hub_distance = calculate_distance_from_hub(node_id, nodes)
    if hub_distance <= 1:
        score += 30  # –°–æ—Å–µ–¥–Ω–∏–µ —Å hub –Ω–æ–¥—ã
    elif hub_distance == 2:
        score += 20  # –ù–æ–¥—ã –≤ 2 —à–∞–≥–∞—Ö
    elif hub_distance == 3:
        score += 10  # –ù–æ–¥—ã –≤ 3 —à–∞–≥–∞—Ö
    else:
        score += 5   # –î–∞–ª—å–Ω–∏–µ –Ω–æ–¥—ã
    
    # 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –Ω–æ–¥ –∏–≥—Ä–æ–∫–∞
    neighbors = node_data.get('neighbors', [])
    player_neighbors = sum(1 for n in neighbors 
                          if nodes.get(n, {}).get('owner') == 'player')
    score += player_neighbors * 15  # –ö–∞–∂–¥—ã–π —Å–æ—Å–µ–¥ +15 –æ—á–∫–æ–≤
    
    # 3. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –Ω–æ–¥ –º–æ–∂–Ω–æ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å)
    expansion_potential = 0
    for neighbor in neighbors:
        if nodes.get(neighbor, {}).get('owner') == 'neutral':
            expansion_potential += 1
    score += expansion_potential * 10
    
    # 4. –¢–∏–ø –Ω–æ–¥—ã
    node_type = node_data.get('type', 'data')
    if node_type == 'cpu_node':
        score += 25  # CPU –Ω–æ–¥—ã –≤–∞–∂–Ω—ã –¥–ª—è overclocker
    elif node_type == 'data_cache':
        score += 15  # Data cache –Ω–æ–¥—ã –ø–æ–ª–µ–∑–Ω—ã
    
    # 5. –®—Ç—Ä–∞—Ñ –∑–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
    resistance = node_data.get('resistance', 50)
    score -= resistance * 0.5
    
    return max(0, score)

def select_actions_with_network_focus(agent: EvolutionAgent, game_state: GameState, available_actions: list) -> list:
    """
    –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–µ—Ç–∏
    """
    actions_to_perform = []
    targeted_nodes = set()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –≥–µ–Ω–æ–º–∞
    genome = agent.genome
    if len(genome) < 50:
        additional_genes = np.random.uniform(-1.0, 1.0, 50 - len(genome))
        genome = np.concatenate([genome, additional_genes])
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    MAX_ACTIONS_PER_TURN = 3
    current_dp = game_state.stats.get('dp', 0)
    current_cpu = game_state.stats.get('cpu', 0)
    
    nodes = game_state.nodes
    player_node_ids = [node_id for node_id, node_data in nodes.items() 
                      if node_data.get('owner') == 'player']
    
    # 1. –ü–†–ò–û–†–ò–¢–ï–¢: –ó–∞—Ö–≤–∞—Ç –Ω–æ–¥ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–∏
    if current_dp >= 10:
        capture_actions = [a for a in available_actions if a['action'] == 'capture']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–¥—ã –ø–æ –æ—Ü–µ–Ω–∫–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–∏
        node_scores = []
        for action in capture_actions:
            target_node_id = action['targetNodeId']
            if target_node_id in targeted_nodes:
                continue
                
            target_node = nodes.get(target_node_id)
            if not target_node:
                continue
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–∏
            score = evaluate_node_for_network_growth(target_node_id, target_node, nodes, player_node_ids)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏–∑ –≥–µ–Ω–æ–º–∞
            node_type = target_node.get('type', 'data')
            if node_type == 'cpu_node':
                score += genome[1] * 50 + 25
            elif node_type == 'data_cache':
                score += genome[2] * 30 + 15
            
            resistance = target_node.get('resistance', 50)
            resistance_penalty = genome[4] * 1.0 + 0.5
            score -= resistance * resistance_penalty
            
            node_scores.append((score, action))
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –Ω–æ–¥—ã
        node_scores.sort(key=lambda x: x[0], reverse=True)
        
        for score, action in node_scores:
            if len(actions_to_perform) >= MAX_ACTIONS_PER_TURN:
                break
                
            if current_dp >= 10:
                actions_to_perform.append(action)
                current_dp -= 10
                targeted_nodes.add(action['targetNodeId'])
                print(f"   üéØ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º {action['targetNodeId']} (–æ—Ü–µ–Ω–∫–∞ —Å–µ—Ç–∏: {score:.1f})")
    
    # 2. –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –†–ê–ó–í–ò–¢–ò–ï
    if current_dp >= 20 and len(actions_to_perform) < MAX_ACTIONS_PER_TURN:
        buildable_nodes = game_state.get_buildable_nodes()
        
        for node_id in buildable_nodes:
            if len(actions_to_perform) >= MAX_ACTIONS_PER_TURN:
                break
                
            if node_id in targeted_nodes:
                continue
                
            node = nodes.get(node_id)
            if not node:
                continue
            
            node_type = node.get('type', 'data')
            
            # –°—Ç—Ä–æ–∏–º miner –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DP
            miner_actions = [a for a in available_actions 
                           if a['action'] == 'build_miner' and a['targetNodeId'] == node_id]
            if miner_actions and current_dp >= 20:
                actions_to_perform.append(miner_actions[0])
                current_dp -= 20
                targeted_nodes.add(node_id)
                print(f"   ‚õèÔ∏è –°—Ç—Ä–æ–∏–º miner –Ω–∞ {node_id}")
                break
    
    # 3. –ê–ü–ì–†–ï–ô–î (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Å—É—Ä—Å—ã)
    if current_dp >= 30 and len(actions_to_perform) < MAX_ACTIONS_PER_TURN:
        upgrade_actions = [a for a in available_actions if a['action'] == 'upgrade_hub']
        if upgrade_actions:
            actions_to_perform.append(upgrade_actions[0])
            print("   ‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥ hub")
    
    # 4. –û–ñ–ò–î–ê–ù–ò–ï (–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏)
    if not actions_to_perform:
        wait_actions = [a for a in available_actions if a['action'] == 'wait']
        if wait_actions:
            actions_to_perform.append(wait_actions[0])
            print("   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ")
    
    return actions_to_perform

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_network_growth_strategy(games_count=5)

if __name__ == "__main__":
    main() 