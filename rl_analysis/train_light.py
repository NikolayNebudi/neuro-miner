#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ª–µ–≥–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import os
import csv
import uuid
import gymnasium as gym
from stable_baselines3 import PPO
from stable_baselines3.common.env_checker import check_env
from stable_baselines3.common.callbacks import BaseCallback, CheckpointCallback
from stable_baselines3.common.vec_env import DummyVecEnv, VecMonitor
from network_echo_env_light import NetworkEchoEnvLight
import numpy as np
from datetime import datetime
import json

# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
EPISODES_PER_STAGE = 10000    # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
LEARNING_RATE = 1e-4
N_STEPS = 1024                 # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
BATCH_SIZE = 32                # –£–º–µ–Ω—å—à–µ–Ω–æ
N_EPOCHS = 4                   # –£–º–µ–Ω—å—à–µ–Ω–æ
ENT_COEF = 0.01

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–µ–≥–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LIGHT_LOGGING = True
MAX_LOG_ENTRIES = 5000         # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π

class LightTrainingCallback(BaseCallback):
    """–ö–∞–ª–±—ç–∫ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, log_file="light_training_log.csv"):
        super().__init__()
        self.log_file = log_file
        self.episode_rewards = []
        self.episode_lengths = []
        self.wins = []
        self.final_scores = []
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
        with open(self.log_file, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([
                'timestamp', 'episode', 'total_steps', 'mean_reward', 
                'mean_length', 'win_rate', 'mean_score', 'std_reward'
            ])
    
    def _on_step(self) -> bool:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ"""
        return True
    
    def _on_rollout_end(self) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ rollout"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å—Ä–µ–¥—ã
        if hasattr(self.training_env, 'envs'):
            env = self.training_env.envs[0]
            if hasattr(env, 'unwrapped') and hasattr(env.unwrapped, '_episode'):
                episode = env.unwrapped._episode
                total_steps = self.num_timesteps
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–≥–æ–≤
                self._collect_episode_stats()
                
                if len(self.episode_rewards) > 0:
                    mean_reward = np.mean(self.episode_rewards[-10:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —ç–ø–∏–∑–æ–¥–æ–≤
                    mean_length = np.mean(self.episode_lengths[-10:])
                    win_rate = np.mean(self.wins[-10:]) * 100
                    mean_score = np.mean(self.final_scores[-10:])
                    std_reward = np.std(self.episode_rewards[-10:])
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
                    with open(self.log_file, 'a', newline='') as f:
                        writer = csv.writer(f)
                        writer.writerow([
                            datetime.now().isoformat(),
                            episode,
                            total_steps,
                            f"{mean_reward:.3f}",
                            f"{mean_length:.1f}",
                            f"{win_rate:.1f}",
                            f"{mean_score:.1f}",
                            f"{std_reward:.3f}"
                        ])
                    
                    print(f"üìä –≠–ø–∏–∑–æ–¥ {episode}: –Ω–∞–≥—Ä–∞–¥–∞={mean_reward:.3f}, –¥–ª–∏–Ω–∞={mean_length:.1f}, –ø–æ–±–µ–¥—ã={win_rate:.1f}%")
    
    def _collect_episode_stats(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–ø–∏–∑–æ–¥–æ–≤ –∏–∑ –ª–æ–≥–æ–≤"""
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç–ø–∏–∑–æ–¥–æ–≤
        log_files = [f for f in os.listdir('.') if f.startswith('light_log_') and f.endswith('.jsonl')]
        if not log_files:
            return
        
        latest_log = max(log_files, key=os.path.getctime)
        
        try:
            with open(latest_log, 'r') as f:
                lines = f.readlines()
                for line in lines[-100:]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                    try:
                        data = json.loads(line)
                        if data.get('type') == 'episode_end':
                            episode = data.get('episode', 0)
                            total_steps = data.get('total_steps', 0)
                            total_reward = data.get('total_reward', 0)
                            final_score = data.get('final_score', 0)
                            win = data.get('win', False)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —ç–ø–∏–∑–æ–¥
                            if episode not in [ep for ep, _ in self.episode_rewards]:
                                self.episode_rewards.append((episode, total_reward))
                                self.episode_lengths.append((episode, total_steps))
                                self.wins.append((episode, win))
                                self.final_scores.append((episode, final_score))
                    except:
                        continue
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

def create_env():
    """–°–æ–∑–¥–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å –ª–µ–≥–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    env = NetworkEchoEnvLight(
        log_actions=LIGHT_LOGGING,
        max_log_entries=MAX_LOG_ENTRIES
    )
    return env

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"  ‚Ä¢ –≠–ø–∏–∑–æ–¥–æ–≤ –Ω–∞ —Å—Ç–∞–¥–∏—é: {EPISODES_PER_STAGE:,}")
    print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ: {MAX_LOG_ENTRIES:,}")
    print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {BATCH_SIZE}")
    print(f"  ‚Ä¢ –®–∞–≥–æ–≤ –Ω–∞ rollout: {N_STEPS}")
    print(f"  ‚Ä¢ –≠–ø–æ—Ö: {N_EPOCHS}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    env = create_env()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    try:
        check_env(env)
        print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    vec_env = DummyVecEnv([lambda: env])
    vec_env = VecMonitor(vec_env)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    model = PPO(
        "MlpPolicy",
        vec_env,
        learning_rate=LEARNING_RATE,
        n_steps=N_STEPS,
        batch_size=BATCH_SIZE,
        n_epochs=N_EPOCHS,
        ent_coef=ENT_COEF,
        verbose=1,
        tensorboard_log="./tensorboard_logs_light"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–±—ç–∫–∏
    callbacks = [
        LightTrainingCallback(log_file="light_training_log.csv"),
        CheckpointCallback(
            save_freq=5000,
            save_path="./checkpoints_light",
            name_prefix="PPO_light"
        )
    ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    print("üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
    try:
        model.learn(
            total_timesteps=EPISODES_PER_STAGE * 1000,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
            callback=callbacks,
            progress_bar=True
        )
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        model.save("light_final_model")
        print("üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: light_final_model")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        model.save("light_interrupted_model")
        print("üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: light_interrupted_model")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        model.save("light_error_model")
        print("üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: light_error_model")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    env.close()
    print("üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 