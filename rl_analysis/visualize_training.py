#!/usr/bin/env python3
"""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
"""

import json
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from collections import defaultdict
import matplotlib.dates as mdates
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('default')
sns.set_palette("husl")

def create_training_visualizations():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è"""
    print("üìä –°–û–ó–î–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ô –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
    log_file = "actions_log.jsonl"
    if os.path.exists(log_file):
        visualize_action_logs(log_file)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_files = [
        "improved_analysis_log.csv",
        "quick_test_log.csv", 
        "optimized_analysis_log.csv"
    ]
    
    for file in results_files:
        if os.path.exists(file):
            visualize_results(file)

def visualize_action_logs(log_file):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    print(f"\nüéÆ –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –õ–û–ì–û–í: {log_file}")
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    episodes = []
    rewards = []
    actions = []
    steps = []
    
    print("‚è≥ –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    with open(log_file, 'r') as f:
        for i, line in enumerate(f):
            if i % 1000 == 0:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é 1000-—é –∑–∞–ø–∏—Å—å
                try:
                    data = json.loads(line)
                    episode = data.get('episode', 0)
                    step = data.get('step', 0)
                    action = data.get('chosen_action', {}).get('action', 'unknown')
                    reward = data.get('reward', 0)
                    
                    episodes.append(episode)
                    rewards.append(reward)
                    actions.append(action)
                    steps.append(step)
                    
                except:
                    continue
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ –æ–±—É—á–µ–Ω–∏—è RL-–∞–≥–µ–Ω—Ç–∞', fontsize=16, fontweight='bold')
    
    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
    axes[0, 0].hist(rewards, bins=50, alpha=0.7, color='skyblue', edgecolor='black')
    axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥')
    axes[0, 0].set_xlabel('–ù–∞–≥—Ä–∞–¥–∞')
    axes[0, 0].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    axes[0, 0].axvline(np.mean(rewards), color='red', linestyle='--', label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(rewards):.3f}')
    axes[0, 0].legend()
    
    # 2. –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç–ø–∏–∑–æ–¥–∞–º
    episode_rewards = defaultdict(list)
    for ep, rew in zip(episodes, rewards):
        episode_rewards[ep].append(rew)
    
    avg_rewards = {ep: np.mean(rewards) for ep, rewards in episode_rewards.items()}
    ep_sorted = sorted(avg_rewards.keys())
    rew_sorted = [avg_rewards[ep] for ep in ep_sorted]
    
    axes[0, 1].plot(ep_sorted, rew_sorted, 'b-', alpha=0.7, linewidth=2)
    axes[0, 1].set_title('–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ —ç–ø–∏–∑–æ–¥–∞–º')
    axes[0, 1].set_xlabel('–≠–ø–∏–∑–æ–¥')
    axes[0, 1].set_ylabel('–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞')
    axes[0, 1].grid(True, alpha=0.3)
    
    # 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
    action_counts = pd.Series(actions).value_counts()
    axes[1, 0].pie(action_counts.values, labels=action_counts.index, autopct='%1.1f%%')
    axes[1, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π')
    
    # 4. –î–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–æ–≤
    episode_lengths = defaultdict(int)
    for ep, step in zip(episodes, steps):
        episode_lengths[ep] = max(episode_lengths[ep], step)
    
    ep_lengths = list(episode_lengths.values())
    axes[1, 1].hist(ep_lengths, bins=30, alpha=0.7, color='lightgreen', edgecolor='black')
    axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —ç–ø–∏–∑–æ–¥–æ–≤')
    axes[1, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤')
    axes[1, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤')
    axes[1, 1].axvline(np.mean(ep_lengths), color='red', linestyle='--', label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(ep_lengths):.0f}')
    axes[1, 1].legend()
    
    plt.tight_layout()
    plt.savefig('training_analysis.png', dpi=300, bbox_inches='tight')
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≥—Ä–∞—Ñ–∏–∫: training_analysis.png")
    plt.close()

def visualize_results(file_path):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è"""
    print(f"\nüìã –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í: {file_path}")
    
    try:
        df = pd.read_csv(file_path)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle(f'–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {os.path.basename(file_path)}', fontsize=16, fontweight='bold')
        
        # 1. –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞
        if 'timestamp' in df.columns:
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            axes[0, 0].plot(df['timestamp'], range(len(df)), 'b-', alpha=0.7)
            axes[0, 0].set_title('–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è')
            axes[0, 0].set_xlabel('–í—Ä–µ–º—è')
            axes[0, 0].set_ylabel('–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏')
            axes[0, 0].tick_params(axis='x', rotation=45)
        
        # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∫–æ–≤
        if 'final_score' in df.columns:
            axes[0, 1].hist(df['final_score'], bins=20, alpha=0.7, color='orange', edgecolor='black')
            axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—á–∫–æ–≤')
            axes[0, 1].set_xlabel('–û—á–∫–∏')
            axes[0, 1].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            axes[0, 1].axvline(df['final_score'].mean(), color='red', linestyle='--', 
                               label=f'–°—Ä–µ–¥–Ω–µ–µ: {df["final_score"].mean():.1f}')
            axes[0, 1].legend()
        
        # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞–≥–æ–≤
        if 'total_steps' in df.columns:
            axes[1, 0].hist(df['total_steps'], bins=20, alpha=0.7, color='purple', edgecolor='black')
            axes[1, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤')
            axes[1, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤')
            axes[1, 0].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            axes[1, 0].axvline(df['total_steps'].mean(), color='red', linestyle='--',
                               label=f'–°—Ä–µ–¥–Ω–µ–µ: {df["total_steps"].mean():.0f}')
            axes[1, 0].legend()
        
        # 4. –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
        if 'win' in df.columns:
            win_rate = df['win'].mean() * 100
            axes[1, 1].pie([win_rate, 100-win_rate], labels=['–ü–æ–±–µ–¥—ã', '–ü–æ—Ä–∞–∂–µ–Ω–∏—è'], 
                           autopct='%1.1f%%', colors=['lightgreen', 'lightcoral'])
            axes[1, 1].set_title('–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥')
        
        plt.tight_layout()
        output_file = f"results_{os.path.basename(file_path).replace('.csv', '')}.png"
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≥—Ä–∞—Ñ–∏–∫: {output_file}")
        plt.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ {file_path}: {e}")

def create_summary_report():
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"""
    print(f"\nüìä –°–û–ó–î–ê–ù–ò–ï –°–í–û–î–ù–û–ì–û –û–¢–ß–ï–¢–ê")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {
        'total_episodes': 0,
        'total_actions': 0,
        'avg_reward': 0,
        'max_reward': 0,
        'min_reward': 0,
        'file_size_gb': 0,
        'training_time': 'Unknown'
    }
    
    # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
    log_file = "actions_log.jsonl"
    if os.path.exists(log_file):
        file_size = os.path.getsize(log_file) / (1024 * 1024 * 1024)
        stats['file_size_gb'] = file_size
        
        episodes = set()
        actions = []
        rewards = []
        
        with open(log_file, 'r') as f:
            for i, line in enumerate(f):
                if i % 1000 == 0:
                    try:
                        data = json.loads(line)
                        episode = data.get('episode', 0)
                        action = data.get('chosen_action', {}).get('action', 'unknown')
                        reward = data.get('reward', 0)
                        
                        episodes.add(episode)
                        actions.append(action)
                        rewards.append(reward)
                    except:
                        continue
        
        stats['total_episodes'] = len(episodes)
        stats['total_actions'] = len(actions)
        if rewards:
            stats['avg_reward'] = np.mean(rewards)
            stats['max_reward'] = np.max(rewards)
            stats['min_reward'] = np.min(rewards)
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))
    fig.suptitle('–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ–±—É—á–µ–Ω–∏—è RL-–∞–≥–µ–Ω—Ç–∞', fontsize=16, fontweight='bold')
    
    # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_text = f"""
    üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    
    üéÆ –≠–ø–∏–∑–æ–¥–æ–≤: {stats['total_episodes']:,}
    üìù –î–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']:,}
    üíæ –†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤: {stats['file_size_gb']:.1f} GB
    
    üéØ –ù–∞–≥—Ä–∞–¥—ã:
    ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {stats['avg_reward']:.3f}
    ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {stats['max_reward']:.3f}
    ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {stats['min_reward']:.3f}
    """
    
    axes[0].text(0.1, 0.5, stats_text, transform=axes[0].transAxes, 
                 fontsize=12, verticalalignment='center', fontfamily='monospace')
    axes[0].set_title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è')
    axes[0].axis('off')
    
    # 2. –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
    problems_text = f"""
    ‚ö†Ô∏è –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
    
    üî¥ –†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤: {stats['file_size_gb']:.1f} GB
    üî¥ –ù–µ—Ö–≤–∞—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    üî¥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
    üî¥ –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    ‚úÖ –†–ï–®–ï–ù–ò–Ø
    
    üü¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    üü¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    üü¢ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    
    axes[1].text(0.1, 0.5, problems_text, transform=axes[1].transAxes,
                 fontsize=12, verticalalignment='center', fontfamily='monospace')
    axes[1].set_title('–ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è')
    axes[1].axis('off')
    
    # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations_text = f"""
    üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    
    üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Ä–µ—Å—É—Ä—Å—ã
    üìä –†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    üíæ –û—á–∏—â–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
    üéØ –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
    """
    
    axes[2].text(0.1, 0.5, recommendations_text, transform=axes[2].transAxes,
                 fontsize=12, verticalalignment='center', fontfamily='monospace')
    axes[2].set_title('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
    axes[2].axis('off')
    
    plt.tight_layout()
    plt.savefig('training_summary.png', dpi=300, bbox_inches='tight')
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç: training_summary.png")
    plt.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    create_training_visualizations()
    create_summary_report()
    print(f"\nüéâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"  ‚Ä¢ training_analysis.png")
    print(f"  ‚Ä¢ training_summary.png")
    print(f"  ‚Ä¢ results_*.png")

if __name__ == "__main__":
    main() 