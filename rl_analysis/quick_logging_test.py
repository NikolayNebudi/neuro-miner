#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ö–∞–Ω–∏–∫ –∏–≥—Ä—ã
"""

import os
import sys
import numpy as np
from datetime import datetime
from enhanced_logging_system import GameLogger, EnhancedNetworkEchoEnv

def test_logging_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
    session_id = f"test_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    logger = GameLogger(log_dir="logs", session_id=session_id)
    
    print(f"üìù –°–µ—Å—Å–∏—è: {session_id}")
    print(f"üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤: {logger.log_dir}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    configs = [
        {'mode': 'full', 'stage': 0, 'name': '–ü–æ–ª–Ω–∞—è –∏–≥—Ä–∞ (—ç—Ç–∞–ø 0)'},
        {'mode': 'economy_tutorial', 'stage': 0, 'name': '–≠–∫–æ–Ω–æ–º–∏–∫–∞ (—ç—Ç–∞–ø 0)'},
        {'mode': 'defense_tutorial', 'stage': 1, 'name': '–û–±–æ—Ä–æ–Ω–∞ (—ç—Ç–∞–ø 1)'}
    ]
    
    total_episodes = 0
    total_wins = 0
    
    for config_idx, config in enumerate(configs):
        print(f"\nüéÆ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_idx + 1}: {config['name']}")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        env = EnhancedNetworkEchoEnv(config=config, logger=logger)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ø–∏–∑–æ–¥–æ–≤
        episodes_per_config = 5  # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
        config_wins = 0
        
        for episode in range(episodes_per_config):
            print(f"  –≠–ø–∏–∑–æ–¥ {episode + 1}/{episodes_per_config}")
            
            obs = env.reset()
            done = False
            step = 0
            max_steps = 200  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
            
            episode_stats = {
                'dp_gained': 0,
                'cpu_gained': 0,
                'nodes_captured': 0,
                'programs_built': 0,
                'enemies_killed': 0
            }
            
            while not done and step < max_steps:
                # –°–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–∏–º–∏—Ç–∞—Ü–∏—è –±–æ—Ç–∞)
                action = np.random.randint(0, 100)
                obs, reward, done, info = env.step(action)
                step += 1
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if step % 50 == 0:
                    current_dp = env.state.get('dp', 0)
                    current_cpu = env.state.get('cpu', 0)
                    current_trace = env.state.get('traceLevel', 0)
                    enemies_count = len(env.state.get('enemies', []))
                    
                    print(f"    –®–∞–≥ {step}: DP={current_dp}, CPU={current_cpu}, Trace={current_trace}, Enemies={enemies_count}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if env.state.get('traceLevel', 0) >= 300:
                    print(f"    ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç trace level")
                    break
                
                if env.state.get('nodes', {}).get('hub', {}).get('owner') != 'player':
                    print(f"    ‚ùå –ü–æ—Ç–µ—Ä—è–Ω hub")
                    break
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_dp = env.state.get('dp', 0)
            final_cpu = env.state.get('cpu', 0)
            final_trace = env.state.get('traceLevel', 0)
            player_nodes = sum(1 for n in env.state.get('nodes', {}).values() if n.get('owner') == 'player')
            total_nodes = len(env.state.get('nodes', {}))
            
            print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: DP={final_dp}, CPU={final_cpu}, Trace={final_trace}")
            print(f"    –£–∑–ª—ã: {player_nodes}/{total_nodes} ({player_nodes/total_nodes*100:.1f}%)")
            
            if reward > 0:
                config_wins += 1
                total_wins += 1
                print(f"    ‚úÖ –ü–æ–±–µ–¥–∞! –ù–∞–≥—Ä–∞–¥–∞: {reward}")
            else:
                print(f"    ‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ. –ù–∞–≥—Ä–∞–¥–∞: {reward}")
            
            total_episodes += 1
        
        config_win_rate = config_wins / episodes_per_config
        print(f"  üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {config_wins}/{episodes_per_config} –ø–æ–±–µ–¥ ({config_win_rate:.1%})")
        
        env.close()
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    
    overall_win_rate = total_wins / total_episodes if total_episodes > 0 else 0
    print(f"–í—Å–µ–≥–æ —ç–ø–∏–∑–æ–¥–æ–≤: {total_episodes}")
    print(f"–í—Å–µ–≥–æ –ø–æ–±–µ–¥: {total_wins}")
    print(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {overall_win_rate:.1%}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
    summary = logger.get_session_summary()
    if summary:
        print(f"\nüìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê:")
        print(f"  –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {summary.get('avg_score', 0):.2f}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {summary.get('avg_steps', 0):.1f}")
        print(f"  –°—Ä–µ–¥–Ω–∏–π trace level: {summary.get('avg_trace_level', 0):.1f}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö
    print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –õ–û–ì–ò:")
    print(f"  –≠–ø–∏–∑–æ–¥—ã: {logger.episode_log}")
    print(f"  –î–µ–π—Å—Ç–≤–∏—è: {logger.action_log}")
    print(f"  –ö–∞—Ä—Ç—ã: {logger.map_log}")
    print(f"  –ë–∞–ª–∞–Ω—Å: {logger.balance_log}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    for log_file in [logger.episode_log, logger.action_log, logger.map_log, logger.balance_log]:
        if os.path.exists(log_file):
            size = os.path.getsize(log_file)
            print(f"  {os.path.basename(log_file)}: {size} –±–∞–π—Ç")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    return True

def analyze_logs_quick():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤"""
    print("\nüîç –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í")
    print("=" * 40)
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    log_dir = "logs"
    if not os.path.exists(log_dir):
        print("‚ùå –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ø–∏–∑–æ–¥—ã
    episodes_dir = os.path.join(log_dir, "episodes")
    if os.path.exists(episodes_dir):
        episode_files = [f for f in os.listdir(episodes_dir) if f.endswith('.csv')]
        if episode_files:
            latest_file = max(episode_files, key=lambda x: os.path.getctime(os.path.join(episodes_dir, x)))
            print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —ç–ø–∏–∑–æ–¥–æ–≤: {latest_file}")
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
            import csv
            with open(os.path.join(episodes_dir, latest_file), 'r') as f:
                reader = csv.DictReader(f)
                episodes = list(reader)
                
                if episodes:
                    print(f"  –í—Å–µ–≥–æ —ç–ø–∏–∑–æ–¥–æ–≤: {len(episodes)}")
                    wins = sum(1 for e in episodes if e['win'] == 'True')
                    print(f"  –ü–æ–±–µ–¥: {wins} ({wins/len(episodes)*100:.1f}%)")
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –ø–æ—Ä–∞–∂–µ–Ω–∏–π
                    lose_reasons = {}
                    for e in episodes:
                        if e['lose_reason']:
                            lose_reasons[e['lose_reason']] = lose_reasons.get(e['lose_reason'], 0) + 1
                    
                    if lose_reasons:
                        print(f"  –ü—Ä–∏—á–∏–Ω—ã –ø–æ—Ä–∞–∂–µ–Ω–∏–π:")
                        for reason, count in lose_reasons.items():
                            print(f"    {reason}: {count}")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–µ–π—Å—Ç–≤–∏–π
    actions_dir = os.path.join(log_dir, "actions")
    if os.path.exists(actions_dir):
        action_files = [f for f in os.listdir(actions_dir) if f.endswith('.jsonl')]
        if action_files:
            latest_action_file = max(action_files, key=lambda x: os.path.getctime(os.path.join(actions_dir, x)))
            print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –¥–µ–π—Å—Ç–≤–∏–π: {latest_action_file}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
            import json
            action_types = {}
            total_actions = 0
            
            with open(os.path.join(actions_dir, latest_action_file), 'r') as f:
                for line in f:
                    try:
                        data = json.loads(line.strip())
                        action = data.get('action', {})
                        action_type = action.get('action', 'unknown')
                        action_types[action_type] = action_types.get(action_type, 0) + 1
                        total_actions += 1
                    except:
                        continue
            
            if action_types:
                print(f"  –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {total_actions}")
                print(f"  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π:")
                for action_type, count in sorted(action_types.items(), key=lambda x: x[1], reverse=True):
                    percentage = count / total_actions * 100
                    print(f"    {action_type}: {count} ({percentage:.1f}%)")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        success = test_logging_system()
        
        if success:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
            analyze_logs_quick()
            
            print(f"\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
            print("–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ö–∞–Ω–∏–∫ –∏–≥—Ä—ã.")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∏–≥—Ä—ã.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc() 