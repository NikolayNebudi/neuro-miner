#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime
import os

def analyze_quick_test_results():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor_file = "quick_test_log.csv.monitor.csv"
    
    if not os.path.exists(monitor_file):
        print(f"‚ùå –§–∞–π–ª {monitor_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    data = []
    with open(monitor_file, 'r') as f:
        lines = f.readlines()
        
    for line in lines:
        if line.startswith('#') or not line.strip():
            continue
        parts = line.strip().split(',')
        if len(parts) >= 3:
            try:
                reward = float(parts[0])
                length = int(parts[1])
                time = float(parts[2])
                data.append({
                    'reward': reward,
                    'length': length,
                    'time': time
                })
            except:
                continue
    
    if not data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    df = pd.DataFrame(data)
    
    print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {len(df)}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {df['reward'].mean():.2f}")
    print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {df['reward'].median():.2f}")
    print(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {df['reward'].std():.2f}")
    print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {df['reward'].min():.2f}")
    print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {df['reward'].max():.2f}")
    print()
    
    print(f"‚è±Ô∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: {df['length'].mean():.1f} —à–∞–≥–æ–≤")
    print(f"   ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {df['time'].max():.1f} —Å–µ–∫—É–Ω–¥")
    print(f"   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {len(df) / df['time'].max():.2f} —ç–ø–∏–∑–æ–¥–æ–≤/—Å–µ–∫")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤:")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
    window_size = max(1, len(df) // 10)
    if window_size > 1:
        df['window'] = df.index // window_size
        window_stats = df.groupby('window').agg({
            'reward': ['mean', 'std'],
            'length': 'mean'
        }).round(2)
        
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {window_size} —ç–ø–∏–∑–æ–¥–æ–≤")
        print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–∫–Ω–∞–º:")
        for i, (_, row) in enumerate(window_stats.iterrows()):
            print(f"     –û–∫–Ω–æ {i}: –Ω–∞–≥—Ä–∞–¥–∞={row[('reward', 'mean')]:.1f}¬±{row[('reward', 'std')]:.1f}, –¥–ª–∏–Ω–∞={row[('length', 'mean')]:.0f}")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:")
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
    cv = df['reward'].std() / df['reward'].mean()
    print(f"   ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {cv:.3f}")
    
    if cv < 0.1:
        stability = "–û—á–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω–æ"
    elif cv < 0.2:
        stability = "–°—Ç–∞–±–∏–ª—å–Ω–æ"
    elif cv < 0.3:
        stability = "–£–º–µ—Ä–µ–Ω–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ"
    else:
        stability = "–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ"
    
    print(f"   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {stability}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if len(df) > 10:
        first_half = df.iloc[:len(df)//2]['reward'].mean()
        second_half = df.iloc[len(df)//2:]['reward'].mean()
        progress = second_half - first_half
        
        print(f"   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è: {progress:+.1f}")
        if progress > 0:
            print(f"   ‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –£–ª—É—á—à–µ–Ω–∏–µ ‚úÖ")
        elif progress < 0:
            print(f"   ‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –£—Ö—É–¥—à–µ–Ω–∏–µ ‚ùå")
        else:
            print(f"   ‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚ûñ")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    print(f"\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', fontsize=16)
    
    # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–≥—Ä–∞–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    axes[0, 0].plot(df['time'], df['reward'], alpha=0.7, linewidth=1)
    axes[0, 0].set_title('–ù–∞–≥—Ä–∞–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏')
    axes[0, 0].set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)')
    axes[0, 0].set_ylabel('–ù–∞–≥—Ä–∞–¥–∞')
    axes[0, 0].grid(True, alpha=0.3)
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –Ω–∞–≥—Ä–∞–¥
    axes[0, 1].hist(df['reward'], bins=20, alpha=0.7, edgecolor='black')
    axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥')
    axes[0, 1].set_xlabel('–ù–∞–≥—Ä–∞–¥–∞')
    axes[0, 1].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    axes[0, 1].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ –¥–ª–∏–Ω—ã —ç–ø–∏–∑–æ–¥–æ–≤
    axes[1, 0].plot(df['time'], df['length'], alpha=0.7, linewidth=1, color='orange')
    axes[1, 0].set_title('–î–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏')
    axes[1, 0].set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)')
    axes[1, 0].set_ylabel('–î–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞')
    axes[1, 0].grid(True, alpha=0.3)
    
    # Scatter plot –Ω–∞–≥—Ä–∞–¥–∞ vs –¥–ª–∏–Ω–∞
    axes[1, 1].scatter(df['length'], df['reward'], alpha=0.6)
    axes[1, 1].set_title('–ù–∞–≥—Ä–∞–¥–∞ vs –î–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞')
    axes[1, 1].set_xlabel('–î–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞')
    axes[1, 1].set_ylabel('–ù–∞–≥—Ä–∞–¥–∞')
    axes[1, 1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('quick_test_analysis.png', dpi=300, bbox_inches='tight')
    print(f"   ‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: quick_test_analysis.png")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {
        'total_episodes': len(df),
        'mean_reward': df['reward'].mean(),
        'median_reward': df['reward'].median(),
        'std_reward': df['reward'].std(),
        'min_reward': df['reward'].min(),
        'max_reward': df['reward'].max(),
        'mean_length': df['length'].mean(),
        'total_time': df['time'].max(),
        'episodes_per_sec': len(df) / df['time'].max(),
        'coefficient_of_variation': cv,
        'stability': stability
    }
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report_file = 'quick_test_report.txt'
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("–û–¢–ß–ï–¢ –û –ë–´–°–¢–†–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò\n")
        f.write("=" * 50 + "\n\n")
        f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        f.write("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
        f.write(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {stats['total_episodes']}\n")
        f.write(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {stats['mean_reward']:.2f}\n")
        f.write(f"  ‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {stats['median_reward']:.2f}\n")
        f.write(f"  ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stats['std_reward']:.2f}\n")
        f.write(f"  ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω –Ω–∞–≥—Ä–∞–¥: [{stats['min_reward']:.2f}, {stats['max_reward']:.2f}]\n\n")
        
        f.write("–í–†–ï–ú–ï–ù–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:\n")
        f.write(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: {stats['mean_length']:.1f} —à–∞–≥–æ–≤\n")
        f.write(f"  ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {stats['total_time']:.1f} —Å–µ–∫—É–Ω–¥\n")
        f.write(f"  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {stats['episodes_per_sec']:.2f} —ç–ø–∏–∑–æ–¥–æ–≤/—Å–µ–∫\n\n")
        
        f.write("–ê–ù–ê–õ–ò–ó –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò:\n")
        f.write(f"  ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {stats['coefficient_of_variation']:.3f}\n")
        f.write(f"  ‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {stats['stability']}\n\n")
        
        f.write("–í–´–í–û–î–´:\n")
        if stats['mean_reward'] > 1000:
            f.write("  ‚úÖ –í—ã—Å–æ–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞\n")
        elif stats['mean_reward'] > 500:
            f.write("  ‚ö†Ô∏è  –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞\n")
        else:
            f.write("  ‚ùå –ù–∏–∑–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞\n")
            
        if stats['coefficient_of_variation'] < 0.2:
            f.write("  ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n")
        else:
            f.write("  ‚ö†Ô∏è  –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n")
            
        if stats['episodes_per_sec'] > 10:
            f.write("  ‚úÖ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è\n")
        else:
            f.write("  ‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è\n")
    
    print(f"   ‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {stats['mean_reward']:.1f}")
    print(f"   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {stats['stability']}")
    print(f"   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {stats['episodes_per_sec']:.1f} —ç–ø–∏–∑–æ–¥–æ–≤/—Å–µ–∫")

if __name__ == "__main__":
    analyze_quick_test_results() 