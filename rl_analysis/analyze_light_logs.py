#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ª–µ–≥–∫–∏—Ö –ª–æ–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è
"""

import json
import os
import pandas as pd
import numpy as np
from collections import defaultdict, Counter
from datetime import datetime

def analyze_light_logs():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–µ–≥–∫–∏–µ –ª–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è"""
    print("üìä –ê–ù–ê–õ–ò–ó –õ–ï–ì–ö–ò–• –õ–û–ì–û–í –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –ª–µ–≥–∫–∏—Ö –ª–æ–≥–æ–≤
    log_files = [f for f in os.listdir('.') if f.startswith('light_log_') and f.endswith('.jsonl')]
    
    if not log_files:
        print("üì≠ –§–∞–π–ª—ã –ª–µ–≥–∫–∏—Ö –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {len(log_files)}")
    
    for log_file in log_files:
        analyze_single_light_log(log_file)

def analyze_single_light_log(log_file):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –ª–µ–≥–∫–∏—Ö –ª–æ–≥–æ–≤"""
    print(f"\nüìã –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê: {log_file}")
    print("-" * 40)
    
    file_size = os.path.getsize(log_file) / (1024 * 1024)  # MB
    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} MB")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    episode_starts = []
    episode_ends = []
    actions = []
    
    with open(log_file, 'r') as f:
        for line in f:
            try:
                data = json.loads(line)
                entry_type = data.get('type')
                
                if entry_type == 'episode_start':
                    episode_starts.append(data)
                elif entry_type == 'episode_end':
                    episode_ends.append(data)
                elif entry_type == 'action':
                    actions.append(data)
                    
            except Exception as e:
                continue
    
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ü–ò–°–ï–ô:")
    print(f"  üéÆ –ù–∞—á–∞–ª–æ —ç–ø–∏–∑–æ–¥–æ–≤: {len(episode_starts)}")
    print(f"  üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–æ–≤: {len(episode_ends)}")
    print(f"  ‚ö° –î–µ–π—Å—Ç–≤–∏—è: {len(actions)}")
    
    if episode_ends:
        analyze_episode_results(episode_ends)
    
    if actions:
        analyze_actions(actions)

def analyze_episode_results(episode_ends):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–ø–∏–∑–æ–¥–æ–≤"""
    print(f"\nüéØ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –≠–ü–ò–ó–û–î–û–í:")
    
    total_steps = [ep['total_steps'] for ep in episode_ends]
    total_rewards = [ep['total_reward'] for ep in episode_ends]
    final_scores = [ep['final_score'] for ep in episode_ends]
    wins = [ep['win'] for ep in episode_ends]
    
    print(f"  üìà –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: {np.mean(total_steps):.1f} —à–∞–≥–æ–≤")
    print(f"  üéØ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {np.mean(total_rewards):.3f}")
    print(f"  üìä –°—Ä–µ–¥–Ω–∏–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {np.mean(final_scores):.1f}")
    print(f"  üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {np.mean(wins) * 100:.1f}%")
    
    print(f"  üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {np.min(total_rewards):.3f}")
    print(f"  üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {np.max(total_rewards):.3f}")
    print(f"  üéÆ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {np.min(total_steps)} —à–∞–≥–æ–≤")
    print(f"  üéÆ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {np.max(total_steps)} —à–∞–≥–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if len(episode_ends) > 10:
        first_10_rewards = [ep['total_reward'] for ep in episode_ends[:10]]
        last_10_rewards = [ep['total_reward'] for ep in episode_ends[-10:]]
        
        progress = np.mean(last_10_rewards) - np.mean(first_10_rewards)
        print(f"  üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è: {progress:.3f}")
        
        if progress > 0:
            print(f"  ‚úÖ –ê–≥–µ–Ω—Ç —É–ª—É—á—à–∞–µ—Ç—Å—è!")
        elif progress < 0:
            print(f"  ‚ùå –ê–≥–µ–Ω—Ç —É—Ö—É–¥—à–∞–µ—Ç—Å—è")
        else:
            print(f"  ‚öñÔ∏è –ê–≥–µ–Ω—Ç —Å—Ç–∞–±–∏–ª–µ–Ω")

def analyze_actions(actions):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞"""
    print(f"\nüéÆ –ê–ù–ê–õ–ò–ó –î–ï–ô–°–¢–í–ò–ô:")
    
    action_counts = Counter()
    rewards_by_action = defaultdict(list)
    
    for action_data in actions:
        action = action_data.get('chosen_action', {}).get('action', 'unknown')
        reward = action_data.get('reward', 0)
        
        action_counts[action] += 1
        rewards_by_action[action].append(reward)
    
    print(f"  üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π:")
    total_actions = sum(action_counts.values())
    
    for action, count in action_counts.most_common():
        percentage = count / total_actions * 100
        avg_reward = np.mean(rewards_by_action[action]) if rewards_by_action[action] else 0
        print(f"    {action}: {count:,} ({percentage:.1f}%) - —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {avg_reward:.3f}")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if actions:
        analyze_state_summaries(actions)

def analyze_state_summaries(actions):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–ô:")
    
    game_over_count = 0
    owned_nodes = []
    available_actions = []
    
    for action_data in actions:
        state_summary = action_data.get('state_summary', {})
        
        if state_summary.get('game_over', False):
            game_over_count += 1
        
        owned_nodes.append(state_summary.get('owned_nodes', 0))
        available_actions.append(state_summary.get('available_actions', 0))
    
    if owned_nodes:
        print(f"  üè† –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–µ–º—ã—Ö —É–∑–ª–æ–≤: {np.mean(owned_nodes):.1f}")
        print(f"  üéØ –ú–∞–∫—Å–∏–º—É–º –≤–ª–∞–¥–µ–µ–º—ã—Ö —É–∑–ª–æ–≤: {np.max(owned_nodes)}")
    
    if available_actions:
        print(f"  ‚ö° –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {np.mean(available_actions):.1f}")
        print(f"  ‚ö° –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {np.max(available_actions)}")
    
    print(f"  üèÅ –ò–≥—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {game_over_count}")

def compare_with_heavy_logs():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ª–µ–≥–∫–∏–µ –ª–æ–≥–∏ —Å —Ç—è–∂–µ–ª—ã–º–∏"""
    print(f"\n‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –° –¢–Ø–ñ–ï–õ–´–ú–ò –õ–û–ì–ê–ú–ò:")
    
    light_logs = [f for f in os.listdir('.') if f.startswith('light_log_') and f.endswith('.jsonl')]
    heavy_logs = [f for f in os.listdir('.') if f.startswith('actions_log') and f.endswith('.jsonl')]
    
    if light_logs and heavy_logs:
        light_size = sum(os.path.getsize(f) for f in light_logs) / (1024 * 1024)  # MB
        heavy_size = sum(os.path.getsize(f) for f in heavy_logs) / (1024 * 1024 * 1024)  # GB
        
        print(f"  üìÅ –†–∞–∑–º–µ—Ä –ª–µ–≥–∫–∏—Ö –ª–æ–≥–æ–≤: {light_size:.2f} MB")
        print(f"  üìÅ –†–∞–∑–º–µ—Ä —Ç—è–∂–µ–ª—ã—Ö –ª–æ–≥–æ–≤: {heavy_size:.2f} GB")
        print(f"  üìä –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: {heavy_size * 1024 / light_size:.1f}x")
        print(f"  ‚úÖ –õ–µ–≥–∫–∏–µ –ª–æ–≥–∏ –≤ {heavy_size * 1024 / light_size:.0f} —Ä–∞–∑ –º–µ–Ω—å—à–µ!")

def create_light_summary():
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ª–µ–≥–∫–∏—Ö –ª–æ–≥–æ–≤"""
    print(f"\nüìã –°–û–ó–î–ê–ù–ò–ï –°–í–û–î–ö–ò –õ–ï–ì–ö–ò–• –õ–û–ì–û–í")
    
    summary = {
        'timestamp': datetime.now().isoformat(),
        'light_logs_found': len([f for f in os.listdir('.') if f.startswith('light_log_')]),
        'total_size_mb': sum(os.path.getsize(f) for f in os.listdir('.') if f.startswith('light_log_')),
        'efficiency': '–í—ã—Å–æ–∫–∞—è'
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É
    with open('light_logs_summary.json', 'w') as f:
        json.dump(summary, f, indent=2)
    
    print(f"‚úÖ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: light_logs_summary.json")
    print(f"üìä –°–≤–æ–¥–∫–∞: {summary}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyze_light_logs()
    compare_with_heavy_logs()
    create_light_summary()
    
    print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –ª–µ–≥–∫–∏—Ö –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ª–µ–≥–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  ‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤")
    print(f"  ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print(f"  ‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

if __name__ == "__main__":
    main() 