#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
"""

import json
import subprocess
import pickle
import os
from evolution_agent import EvolutionAgent, GameState

def test_agent(games_count: int = 10):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑ best_agent.pkl")
    print(f"üéÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {games_count}")
    print("-" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
    try:
        with open('best_agent.pkl', 'rb') as f:
            agent = pickle.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª best_agent.pkl –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞.")
        return
    
    game_results = []
    
    for game_num in range(1, games_count + 1):
        print(f"üéØ –ò–≥—Ä–∞ {game_num}/{games_count}")
        try:
            reward, win, stats = play_single_game(agent)
            
            result = {
                'game': game_num,
                'score': reward,
                'win': win,
                'stats': stats
            }
            game_results.append(result)
            
            status = "–ü–û–ë–ï–î–ê" if win else "–ü–û–†–ê–ñ–ï–ù–ò–ï"
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
            print(f"   –°—á–µ—Ç: {reward:.2f}")
            print(f"   DP: {stats.get('dp', 0)}")
            print(f"   CPU: {stats.get('cpu', 0)}")
            print(f"   –ù–æ–¥—ã –∏–≥—Ä–æ–∫–∞: {stats.get('playerNodes', 0)}")
            print(f"   Trace Level: {stats.get('traceLevel', 0):.1f}")
            print()
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ: {e}")
            print()
    
    if not game_results:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    wins = sum(1 for r in game_results if r['win'])
    avg_score = sum(r['score'] for r in game_results) / len(game_results)
    best_score = max(r['score'] for r in game_results)
    worst_score = min(r['score'] for r in game_results)
    
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –ü–æ–±–µ–¥: {wins}/{len(game_results)} ({wins/len(game_results)*100:.1f}%)")
    print(f"   –°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç: {avg_score:.2f}")
    print(f"   –õ—É—á—à–∏–π —Å—á–µ—Ç: {best_score:.2f}")
    print(f"   –•—É–¥—à–∏–π —Å—á–µ—Ç: {worst_score:.2f}")
    print()
    
    print("üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    for result in game_results:
        status = "–ü–û–ë–ï–î–ê" if result['win'] else "–ü–û–†–ê–ñ–ï–ù–ò–ï"
        print(f"   –ò–≥—Ä–∞ {result['game']}: {result['score']:.2f} ({status})")

def play_single_game(agent: EvolutionAgent) -> tuple:
    """–°—ã–≥—Ä–∞—Ç—å –æ–¥–Ω—É –∏–≥—Ä—É —Å –∞–≥–µ–Ω—Ç–æ–º"""
    
    # –ó–∞–ø—É—Å–∫ headless –¥–≤–∏–∂–∫–∞
    process = subprocess.Popen(
        ['node', 'game_engine_headless.js'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    
    try:
        # –°–±—Ä–æ—Å –∏–≥—Ä—ã
        reset_cmd = json.dumps({'cmd': 'reset'}) + '\n'
        process.stdin.write(reset_cmd)
        process.stdin.flush()
        
        response = process.stdout.readline()
        game_state = GameState(json.loads(response))
        
        total_reward = 0.0
        steps = 0
        max_steps = 1000
        
        while not game_state.done and steps < max_steps:
            # –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            actions_cmd = json.dumps({'cmd': 'get_actions'}) + '\n'
            process.stdin.write(actions_cmd)
            process.stdin.flush()
            
            # –ß–∏—Ç–∞–µ–º stderr –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                import select
                if select.select([process.stderr], [], [], 0.1)[0]:
                    stderr_line = process.stderr.readline()
                    if stderr_line:
                        print(f"DEBUG JS: {stderr_line.strip()}")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è stderr
            
            response = process.stdout.readline()
            available_actions = json.loads(response)['actions']
            
            # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            print(f"–®–∞–≥ {steps+1}: –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {available_actions}")
            
            if not available_actions:
                print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∞–≥–µ–Ω—Ç –∂–¥—ë—Ç.")
                break
            
            # –í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–Ω–æ–º–∞ –∞–≥–µ–Ω—Ç–∞
            action = select_action(agent, game_state, available_actions)
            print(f"–®–∞–≥ {steps+1}: –ê–≥–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
            action_cmd = json.dumps({'cmd': 'step', 'action': action}) + '\n'
            process.stdin.write(action_cmd)
            process.stdin.flush()
            
            # –ß–∏—Ç–∞–µ–º stderr –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                import select
                if select.select([process.stderr], [], [], 0.1)[0]:
                    stderr_line = process.stderr.readline()
                    if stderr_line:
                        print(f"DEBUG JS: {stderr_line.strip()}")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è stderr
            
            response = process.stdout.readline()
            result = json.loads(response)
            
            # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            game_state = GameState(result['newState'])
            total_reward += result.get('reward', 0)
            
            # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = game_state.stats
            print(f"–®–∞–≥ {steps+1}: DP={stats.get('dp', 0)}, CPU={stats.get('cpu', 0)}, PlayerNodes={stats.get('playerNodes', 0)}, Trace={stats.get('traceLevel', 0):.1f}")
            
            # –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –∫–∞—Ä—Ç—ã –∏ –Ω–æ–¥
            if steps % 50 == 0 or steps < 10:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 50 —à–∞–≥–æ–≤ –∏ –ø–µ—Ä–≤—ã–µ 10
                print(f"=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê (—à–∞–≥ {steps+1}) ===")
                print(f"–ù–æ–¥—ã: {game_state.nodes}")
                print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {game_state.stats}")
                print(f"–í—Ä–∞–≥–∏: {game_state.enemies}")
                print(f"–í–ª–∞–¥–µ–ª—å—Ü—ã –Ω–æ–¥:")
                if game_state.nodes:
                    for node_id, node_data in game_state.nodes.items():
                        owner = node_data.get('owner', 'none')
                        print(f"  {node_id}: {owner}")
                else:
                    print("  –ù–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                print("=" * 50)
            
            steps += 1
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
        if game_state.win:
            total_reward += 1000
        elif game_state.done and not game_state.win:
            total_reward -= 500
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = game_state.stats
        total_reward += stats.get('dp', 0) * 0.1
        total_reward += stats.get('playerNodes', 0) * 10
        total_reward -= stats.get('traceLevel', 0) * 0.5
        
        process.terminate()
        return total_reward, game_state.win, stats
        
    except Exception as e:
        process.terminate()
        raise e

def select_action(agent: EvolutionAgent, game_state: GameState, available_actions: list) -> dict:
    """–í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –≥–µ–Ω–æ–º–∞ –∞–≥–µ–Ω—Ç–∞"""
    import random
    import numpy as np

    # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤—Å–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–æ—Å–µ–¥–Ω–∏–µ –Ω–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ isCapturing
    capturable = []
    for node_id in game_state.get_capturable_nodes():
        node = game_state.nodes[node_id]
        if not node.get('isCapturing', False):
            capturable.append(node_id)
    if 'capture' in available_actions and capturable:
        return {'action': 'capture', 'targetNodeId': capturable[0]}

    # 2. –°—Ç—Ä–æ–∏–º –Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º
    buildable = game_state.get_buildable_nodes()
    if buildable:
        for build_action in ['build_miner', 'build_sentry', 'build_shield', 'build_overclocker']:
            if build_action in available_actions:
                return {'action': build_action, 'targetNodeId': buildable[0]}

    # 3. –ê–ø–≥—Ä–µ–π–¥–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ —Å–≤–æ–∏—Ö –Ω–æ–¥–∞—Ö
    upgradable = game_state.get_upgradable_nodes()
    if 'upgrade' in available_actions and upgradable:
        return {'action': 'upgrade', 'targetNodeId': upgradable[0]}

    # 4. –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –ø–æ –≤–µ—Å–∞–º –≥–µ–Ω–æ–º–∞
    weights = agent.get_action_weights(game_state)
    filtered = [(a, weights.get(a, 0)) for a in available_actions]
    filtered = [f for f in filtered if f[1] > 0]
    if filtered:
        actions, ws = zip(*filtered)
        chosen = np.random.choice(actions, p=np.array(ws)/np.sum(ws))
        if chosen in ['network_capture', 'upgrade_hub', 'emp_blast']:
            return {'action': chosen}
        else:
            # –î–ª—è –¥–µ–π—Å—Ç–≤–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö targetNodeId, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –Ω–æ–¥—É
            if chosen.startswith('build') and buildable:
                return {'action': chosen, 'targetNodeId': buildable[0]}
            if chosen == 'upgrade' and upgradable:
                return {'action': chosen, 'targetNodeId': upgradable[0]}
            if chosen == 'capture' and capturable:
                return {'action': chosen, 'targetNodeId': capturable[0]}
    # 5. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî wait
    return {'action': 'wait'}

def analyze_agent_strategy(agent_file: str = 'best_agent.pkl'):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞–≥–µ–Ω—Ç–∞"""
    
    if not os.path.exists(agent_file):
        print(f"‚ùå –§–∞–π–ª –∞–≥–µ–Ω—Ç–∞ {agent_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    with open(agent_file, 'rb') as f:
        agent = pickle.load(f)
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–≥–µ–Ω—Ç–∞ –∏–∑ {agent_file}")
    print("-" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–æ–º
    genome = agent.genome
    action_names = [
        'build_miner', 'build_sentry', 'build_shield', 'build_overclocker',
        'upgrade', 'capture', 'upgrade_hub', 'emp_blast', 'network_capture', 'wait'
    ]
    
    print("üìä –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π:")
    for i, action in enumerate(action_names):
        if i < len(genome):
            weight = genome[i]
            preference = "–ü–û–ó–ò–¢–ò–í–ù–û–ï" if weight > 0 else "–ù–ï–ì–ê–¢–ò–í–ù–û–ï"
            strength = abs(weight)
            print(f"   {action}: {preference} (—Å–∏–ª–∞: {strength:.3f})")
    
    print(f"\nüß¨ –†–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞: {len(genome)}")
    print(f"üìà –§–∏—Ç–Ω–µ—Å –∞–≥–µ–Ω—Ç–∞: {agent.fitness:.2f}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == 'test':
            games_count = int(sys.argv[2]) if len(sys.argv) > 2 else 10
            test_agent(games_count=games_count)
        
        elif command == 'analyze':
            analyze_agent_strategy()
        
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python test_agent.py test [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∏–≥—Ä]")
            print("  python test_agent.py analyze")
    
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        test_agent()

if __name__ == "__main__":
    main() 