#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
"""

import json
import subprocess
import pickle
import os
import random
import numpy as np
from evolution_agent import EvolutionAgent, GameState

def test_agent(games_count: int = 10):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑ best_agent.pkl")
    print(f"üéÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {games_count}")
    print("-" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
    try:
        with open('best_agent.pkl', 'rb') as f:
            agent = pickle.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª best_agent.pkl –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞.")
        return
    
    game_results = []
    
    for game_num in range(1, games_count + 1):
        print(f"üéØ –ò–≥—Ä–∞ {game_num}/{games_count}")
        try:
            reward, win, stats = play_single_game(agent)
            
            result = {
                'game': game_num,
                'score': reward,
                'win': win,
                'stats': stats
            }
            game_results.append(result)
            
            status = "–ü–û–ë–ï–î–ê" if win else "–ü–û–†–ê–ñ–ï–ù–ò–ï"
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
            print(f"   –°—á–µ—Ç: {reward:.2f}")
            print(f"   DP: {stats.get('dp', 0)}")
            print(f"   CPU: {stats.get('cpu', 0)}")
            print(f"   –ù–æ–¥—ã –∏–≥—Ä–æ–∫–∞: {stats.get('playerNodes', 0)}")
            print(f"   Trace Level: {stats.get('traceLevel', 0):.1f}")
            print()
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ: {e}")
            print()
    
    if not game_results:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    wins = sum(1 for r in game_results if r['win'])
    avg_score = sum(r['score'] for r in game_results) / len(game_results)
    best_score = max(r['score'] for r in game_results)
    worst_score = min(r['score'] for r in game_results)
    
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –ü–æ–±–µ–¥: {wins}/{len(game_results)} ({wins/len(game_results)*100:.1f}%)")
    print(f"   –°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç: {avg_score:.2f}")
    print(f"   –õ—É—á—à–∏–π —Å—á–µ—Ç: {best_score:.2f}")
    print(f"   –•—É–¥—à–∏–π —Å—á–µ—Ç: {worst_score:.2f}")
    print()
    
    print("üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    for result in game_results:
        status = "–ü–û–ë–ï–î–ê" if result['win'] else "–ü–û–†–ê–ñ–ï–ù–ò–ï"
        print(f"   –ò–≥—Ä–∞ {result['game']}: {result['score']:.2f} ({status})")

def play_single_game(agent: EvolutionAgent) -> tuple:
    """–°—ã–≥—Ä–∞—Ç—å –æ–¥–Ω—É –∏–≥—Ä—É —Å –∞–≥–µ–Ω—Ç–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏–¥–µ–π—Å—Ç–≤–∏–π –∏ —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞"""
    
    process = subprocess.Popen(
        ['node', 'game_engine_headless.js'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    
    try:
        reset_cmd = json.dumps({'cmd': 'reset'}) + '\n'
        process.stdin.write(reset_cmd)
        process.stdin.flush()
        
        response = process.stdout.readline()
        game_state = GameState(json.loads(response))
        
        total_reward = 0.0
        steps = 0
        max_steps = 1000
        
        while not game_state.done and steps < max_steps:
            actions_cmd = json.dumps({'cmd': 'get_actions'}) + '\n'
            process.stdin.write(actions_cmd)
            process.stdin.flush()
            
            try:
                import select
                if select.select([process.stderr], [], [], 0.1)[0]:
                    stderr_line = process.stderr.readline()
                    if stderr_line:
                        print(f"DEBUG JS: {stderr_line.strip()}")
            except:
                pass
            
            response = process.stdout.readline()
            available_actions = json.loads(response)['actions']
            print(f"–®–∞–≥ {steps+1}: –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {available_actions}")
            
            if not available_actions:
                print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∞–≥–µ–Ω—Ç –∂–¥—ë—Ç.")
                break
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
            actions = select_actions(agent, game_state, available_actions)
            print(f"–®–∞–≥ {steps+1}: –ê–≥–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –ø—É–ª –¥–µ–π—Å—Ç–≤–∏–π: {actions}")
            
            # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ available_actions
            for action in actions:
                if action not in available_actions:
                    print(f"‚ùå –û–®–ò–ë–ö–ê: –ê–≥–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö!")
                    print(f"–í—ã–±—Ä–∞–Ω–æ: {action}")
                    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_actions}")
                    raise RuntimeError("–†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω: –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ available_actions")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–≤–∏–∂–æ–∫
            action_cmd = json.dumps({'cmd': 'step', 'actions': actions}) + '\n'
            process.stdin.write(action_cmd)
            process.stdin.flush()
            try:
                import select
                if select.select([process.stderr], [], [], 0.1)[0]:
                    stderr_line = process.stderr.readline()
                    if stderr_line:
                        print(f"DEBUG JS: {stderr_line.strip()}")
            except:
                pass
            response = process.stdout.readline()
            result = json.loads(response)
            executed = result.get('executed_actions') or result.get('performedActions')
            # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤—Å–µ –ª–∏ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∞–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            for i, act in enumerate(actions):
                if not executed or i >= len(executed) or not executed[i]['success']:
                    print(f"‚ùå –û–®–ò–ë–ö–ê: –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–≤–∏–∂–∫–æ–º! {executed}")
                    raise RuntimeError("–†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω: –Ω–µ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–≤–∏–∂–∫–æ–º")
                if executed[i]['action'] != act:
                    print(f"‚ùå –û–®–ò–ë–ö–ê: –†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º! {executed}")
                    raise RuntimeError("–†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω: –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            game_state = GameState(result['newState'])
            total_reward += result.get('reward', 0)
            stats = game_state.stats
            print(f"–®–∞–≥ {steps+1}: DP={stats.get('dp', 0)}, CPU={stats.get('cpu', 0)}, PlayerNodes={stats.get('playerNodes', 0)}, Trace={stats.get('traceLevel', 0):.1f}")
            
            if steps % 50 == 0 or steps < 10:
                print(f"=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê (—à–∞–≥ {steps+1}) ===")
                print(f"–ù–æ–¥—ã: {game_state.nodes}")
                print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {game_state.stats}")
                print(f"–í—Ä–∞–≥–∏: {game_state.enemies}")
                print(f"–í–ª–∞–¥–µ–ª—å—Ü—ã –Ω–æ–¥:")
                if game_state.nodes:
                    for node_id, node_data in game_state.nodes.items():
                        owner = node_data.get('owner', 'none')
                        print(f"  {node_id}: {owner}")
                else:
                    print("  –ù–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                print("=" * 50)
            
            steps += 1
        
        if game_state.win:
            total_reward += 1000
        elif game_state.done and not game_state.win:
            total_reward -= 500
        stats = game_state.stats
        total_reward += stats.get('dp', 0) * 0.1
        total_reward += stats.get('playerNodes', 0) * 10
        total_reward -= stats.get('traceLevel', 0) * 0.5
        process.terminate()
        return total_reward, game_state.win, stats
    except Exception as e:
        process.terminate()
        raise e

def select_actions(agent: EvolutionAgent, game_state: GameState, available_actions: list) -> list:
    """
    –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è "–º–æ–∑–≥–∞" –∞–≥–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è –≥–µ–Ω–æ–º –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –æ–¥–∏–Ω —Ö–æ–¥
    """
    
    # === –ú–ê–ü–ü–ò–ù–ì –ì–ï–ù–û–ú–ê ===
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≥–µ–Ω–æ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
    genome = agent.genome
    if len(genome) < 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≥–µ–Ω–æ–º–∞
        # –†–∞—Å—à–∏—Ä—è–µ–º numpy array –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
        additional_genes = np.random.uniform(-1.0, 1.0, 50 - len(genome))
        genome = np.concatenate([genome, additional_genes])
    
    # --- –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (0-200) ---
    CRITICAL_TRACE_THRESHOLD = abs(genome[0]) * 200  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å trace
    HIGH_TRACE_THRESHOLD = abs(genome[1]) * 150      # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å trace
    LOW_DP_THRESHOLD = abs(genome[2]) * 50           # –ü–æ—Ä–æ–≥ –Ω–µ—Ö–≤–∞—Ç–∫–∏ DP
    SAVE_CPU_FOR_EMP_THRESHOLD = abs(genome[3]) * 100 # –ü–æ—Ä–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CPU –¥–ª—è EMP
    
    # --- –í–µ—Å–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (-1.0 –¥–æ 1.0) ---
    CAPTURE_NEIGHBOR_WEIGHT = genome[4]              # –í–µ—Å —Å–æ—Å–µ–¥–Ω–∏—Ö –Ω–æ–¥ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ
    CAPTURE_RESISTANCE_PENALTY = genome[5]           # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
    CAPTURE_CPU_NODE_BONUS = genome[6]               # –ë–æ–Ω—É—Å –∑–∞ CPU –Ω–æ–¥—ã
    CAPTURE_DATA_CACHE_BONUS = genome[7]             # –ë–æ–Ω—É—Å –∑–∞ –∫—ç—à –Ω–æ–¥—ã
    BUILD_MINER_WEIGHT = genome[8]                   # –í–µ—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–∞
    BUILD_SENTRY_WEIGHT = genome[9]                  # –í–µ—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ sentry
    BUILD_OVERCLOCKER_WEIGHT = genome[10]            # –í–µ—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ overclocker
    UPGRADE_WEIGHT = genome[11]                      # –í–µ—Å –∞–ø–≥—Ä–µ–π–¥–∞
    NETWORK_CAPTURE_WEIGHT = genome[12]              # –í–µ—Å network_capture
    EMP_BLAST_WEIGHT = genome[13]                    # –í–µ—Å EMP blast
    WAIT_WEIGHT = genome[14]                         # –í–µ—Å –æ–∂–∏–¥–∞–Ω–∏—è
    
    # --- –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
    MAX_ACTIONS_PER_TURN = int(abs(genome[15]) * 5) + 1  # –ú–∞–∫—Å–∏–º—É–º –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ —Ö–æ–¥
    DEFENSE_PRIORITY = genome[16]                   # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—â–∏—Ç—ã
    ECONOMY_PRIORITY = genome[17]                   # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏
    AGGRESSION_PRIORITY = genome[18]                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–∏
    
    # === –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –ò–ì–†–´ ===
    stats = game_state.stats
    dp = stats.get('dp', 0)
    cpu = stats.get('cpu', 0)
    trace_level = stats.get('traceLevel', 0)
    player_nodes = stats.get('playerNodes', 0)
    total_nodes = stats.get('totalNodes', 1)
    capture_percentage = (player_nodes / total_nodes) * 100
    
    nodes = game_state.nodes
    enemies = game_state.enemies
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–æ–¥
    player_node_ids = [node_id for node_id, node_data in nodes.items() 
                      if node_data.get('owner') == 'player']
    neutral_nodes = [node_id for node_id, node_data in nodes.items() 
                    if node_data.get('owner') == 'neutral']
    
    # –ù–æ–¥—ã –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π
    nodes_under_threat = []
    if enemies:
        for enemy in enemies:
            enemy_node = enemy.get('currentNodeId')
            if enemy_node:
                enemy_node_data = nodes.get(enemy_node)
                if enemy_node_data:
                    neighbors = enemy_node_data.get('neighbors', [])
                    for neighbor in neighbors:
                        neighbor_data = nodes.get(neighbor)
                        if neighbor_data and neighbor_data.get('owner') == 'player':
                            nodes_under_threat.append(neighbor)
    
    print(f"üîç –ê–ù–ê–õ–ò–ó –°–ò–¢–£–ê–¶–ò–ò:")
    print(f"   DP: {dp}, CPU: {cpu}, Trace: {trace_level:.1f}")
    print(f"   –ù–æ–¥—ã –∏–≥—Ä–æ–∫–∞: {len(player_node_ids)}, –ó–∞—Ö–≤–∞—Ç: {capture_percentage:.1f}%")
    print(f"   –ü–æ–¥ —É–≥—Ä–æ–∑–æ–π: {len(set(nodes_under_threat))}, –í—Ä–∞–≥–æ–≤: {len(enemies)}")
    
    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–£–õ–¨–¢–ò-–î–ï–ô–°–¢–í–ò–ô ===
    actions_to_perform = []
    targeted_nodes = set()
    current_dp = dp
    current_cpu = cpu
    

    
    # === –ê–õ–ì–û–†–ò–¢–ú –í–´–ë–û–†–ê –î–ï–ô–°–¢–í–ò–ô ===
    
    # 1. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–ò–¢–£–ê–¶–ò–ò (–≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å)
    if trace_level > CRITICAL_TRACE_THRESHOLD:
        print(f"   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–´–°–û–ö–ò–ô TRACE ({trace_level:.1f} > {CRITICAL_TRACE_THRESHOLD:.1f})")
        network_actions = [a for a in available_actions if a['action'] == 'network_capture']
        if network_actions:
            actions_to_perform.append(random.choice(network_actions))
            print("   ‚úÖ –í—ã–±–∏—Ä–∞–µ–º network_capture –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è trace")
            return actions_to_perform
    
    # 2. –ü–û–ë–ï–î–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (capture_web) - –≠–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    capture_web_actions = [a for a in available_actions if a['action'] == 'capture_web']
    if capture_web_actions:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–æ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ capture_web
        capture_web_priority = genome[5] * 5.0 + 3.0  # –í—ã—Å–æ–∫–∏–π –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        print(f"   üèÜ –ü–†–ò–û–†–ò–¢–ï–¢: Capture web - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–±–µ–¥–∞! (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {capture_web_priority:.2f})")
        return [capture_web_actions[0]]
    
    # 3. –ó–ê–•–í–ê–¢ HUB (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    hub_capture_actions = [a for a in available_actions 
                          if a['action'] == 'capture' and a.get('targetNodeId') == 'hub']
    if hub_capture_actions and current_dp >= 10:
        print("   üèÜ –ü–†–ò–û–†–ò–¢–ï–¢: –ó–∞—Ö–≤–∞—Ç HUB!")
        actions_to_perform.append(hub_capture_actions[0])
        current_dp -= 10
        targeted_nodes.add('hub')
    
    # 4. –ó–ê–©–ò–¢–ê –ù–û–î –ü–û–î –£–ì–†–û–ó–û–ô
    if nodes_under_threat and DEFENSE_PRIORITY > 0:
        print(f"   üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –Ω–æ–¥ –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {DEFENSE_PRIORITY:.2f})")
        for threatened_node in set(nodes_under_threat):
            if threatened_node in targeted_nodes:
                continue
                
            # –°—Ç—Ä–æ–∏–º sentry
            sentry_actions = [a for a in available_actions 
                            if a['action'] == 'build_sentry' and a['targetNodeId'] == threatened_node]
            if sentry_actions and current_dp >= 40:
                actions_to_perform.append(random.choice(sentry_actions))
                current_dp -= 40
                targeted_nodes.add(threatened_node)
                print(f"   üõ°Ô∏è –°—Ç—Ä–æ–∏–º sentry –Ω–∞ {threatened_node}")
                break
            
            # –°—Ç—Ä–æ–∏–º shield
            shield_actions = [a for a in available_actions 
                            if a['action'] == 'build_shield' and a['targetNodeId'] == threatened_node]
            if shield_actions and current_dp >= 30:
                actions_to_perform.append(random.choice(shield_actions))
                current_dp -= 30
                targeted_nodes.add(threatened_node)
                print(f"   üõ°Ô∏è –°—Ç—Ä–æ–∏–º shield –Ω–∞ {threatened_node}")
                break
    
    # 5. –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –î–ï–ô–°–¢–í–ò–Ø (–ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º trace)
    if trace_level > HIGH_TRACE_THRESHOLD:
        print(f"   ‚ö†Ô∏è –í–´–°–û–ö–ò–ô TRACE ({trace_level:.1f} > {HIGH_TRACE_THRESHOLD:.1f})")
        network_actions = [a for a in available_actions if a['action'] == 'network_capture']
        if network_actions and NETWORK_CAPTURE_WEIGHT > 0:
            actions_to_perform.append(random.choice(network_actions))
            print("   ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º network_capture")
    
    # 6. –ó–ê–•–í–ê–¢ –í–´–ì–û–î–ù–´–• –ù–û–î (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –≠–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
    if capture_percentage < 60:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–æ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞—Ö–≤–∞—Ç–∞
        capture_priority = genome[0] * 3.0 + 2.0  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        print(f"   üéØ –ó–∞—Ö–≤–∞—Ç –Ω–æ–¥ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {capture_priority:.2f})")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—Ö–≤–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞—Ö–≤–∞—Ç–∞
        if capture_percentage < 30:
            capture_priority *= 4.0  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å
        elif capture_percentage < 50:
            capture_priority *= 2.5  # –û—á–µ–Ω—å –≤–∞–∂–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å
        elif capture_percentage < 60:
            capture_priority *= 1.5  # –í–∞–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å 60%
        
        capture_actions = [a for a in available_actions if a['action'] == 'capture']
        
        for action in capture_actions:
            if len(actions_to_perform) >= MAX_ACTIONS_PER_TURN:
                break
                
            target_node_id = action['targetNodeId']
            if target_node_id in targeted_nodes:
                continue
                
            target_node = nodes.get(target_node_id)
            if not target_node:
                continue
            
            # –û—Ü–µ–Ω–∫–∞ –Ω–æ–¥—ã –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–∏
            score = evaluate_node_for_network_growth(target_node_id, target_node, nodes, player_node_ids)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–Ω–æ–º–∞
            node_type = target_node.get('type', 'data')
            resistance = target_node.get('resistance', 50)
            
            # –ë–æ–Ω—É—Å—ã –∑–∞ —Ç–∏–ø –Ω–æ–¥—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–æ–º)
            if node_type == 'cpu_node':
                score += genome[1] * 50 + 25  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è CPU –Ω–æ–¥
            elif node_type == 'data_cache':
                score += genome[2] * 30 + 15   # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è data_cache
            
            # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–æ–º)
            resistance_penalty = genome[4] * 1.0 + 0.5
            score -= resistance * resistance_penalty

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∑–∞—Ö–≤–∞—Ç–∞
            final_score = score * capture_priority

            if final_score > 0 and current_dp >= 10:
                actions_to_perform.append(action)
                current_dp -= 10
                targeted_nodes.add(target_node_id)
                print(f"   üéØ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º {target_node_id} (–æ—Ü–µ–Ω–∫–∞: {final_score:.1f})")
    
    # 7. –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –†–ê–ó–í–ò–¢–ò–ï
    if current_dp < LOW_DP_THRESHOLD and ECONOMY_PRIORITY > 0:
        print(f"   üí∞ –†–∞–∑–≤–∏—Ç–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ECONOMY_PRIORITY:.2f})")
        buildable_nodes = game_state.get_buildable_nodes()
        
        for node_id in buildable_nodes:
            if len(actions_to_perform) >= MAX_ACTIONS_PER_TURN:
                break
                
            if node_id in targeted_nodes:
                continue
                
            node = nodes.get(node_id)
            if not node:
                continue
            
            node_type = node.get('type', 'data')
            
            # –°—Ç—Ä–æ–∏–º miner –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DP
            miner_actions = [a for a in available_actions 
                           if a['action'] == 'build_miner' and a['targetNodeId'] == node_id]
            if miner_actions and current_dp >= 20 and BUILD_MINER_WEIGHT > 0:
                actions_to_perform.append(random.choice(miner_actions))
                current_dp -= 20
                targeted_nodes.add(node_id)
                print(f"   ‚õèÔ∏è –°—Ç—Ä–æ–∏–º miner –Ω–∞ {node_id}")
                break
            
            # –°—Ç—Ä–æ–∏–º overclocker –Ω–∞ CPU-–Ω–æ–¥–∞—Ö
            overclocker_actions = [a for a in available_actions 
                                 if a['action'] == 'build_overclocker' and a['targetNodeId'] == node_id]
            if overclocker_actions and current_dp >= 25 and node_type == 'cpu_node' and BUILD_OVERCLOCKER_WEIGHT > 0:
                actions_to_perform.append(random.choice(overclocker_actions))
                current_dp -= 25
                targeted_nodes.add(node_id)
                print(f"   ‚ö° –°—Ç—Ä–æ–∏–º overclocker –Ω–∞ {node_id}")
                break
    
    # 8. –ê–ü–ì–†–ï–ô–î –ü–†–û–ì–†–ê–ú–ú
    if current_dp >= 30 and UPGRADE_WEIGHT > 0:
        print(f"   ‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥ –ø—Ä–æ–≥—Ä–∞–º–º (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {UPGRADE_WEIGHT:.2f})")
        
        # –ê–ø–≥—Ä–µ–π–¥ hub
        hub_upgrade_actions = [a for a in available_actions if a['action'] == 'upgrade_hub']
        if hub_upgrade_actions:
            actions_to_perform.append(hub_upgrade_actions[0])
            print("   ‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥ hub")
        
        # –ê–ø–≥—Ä–µ–π–¥ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º
        upgrade_actions = [a for a in available_actions if a['action'] == 'upgrade']
        for action in upgrade_actions:
            if len(actions_to_perform) >= MAX_ACTIONS_PER_TURN:
                break
                
            target_node_id = action.get('targetNodeId')
            if target_node_id in targeted_nodes:
                continue
                
            actions_to_perform.append(action)
            targeted_nodes.add(target_node_id)
            print(f"   ‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥ {target_node_id}")
    
    # 9. –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –î–ï–ô–°–¢–í–ò–Ø
    if current_cpu >= SAVE_CPU_FOR_EMP_THRESHOLD and enemies and EMP_BLAST_WEIGHT > 0:
        print(f"   üí• EMP blast –ø—Ä–æ—Ç–∏–≤ –≤—Ä–∞–≥–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {EMP_BLAST_WEIGHT:.2f})")
        emp_actions = [a for a in available_actions if a['action'] == 'emp_blast']
        if emp_actions:
            actions_to_perform.append(random.choice(emp_actions))
            print("   üí• –î–æ–±–∞–≤–ª—è–µ–º EMP blast")
    
    # 10. –û–ñ–ò–î–ê–ù–ò–ï (–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏)
    if not actions_to_perform:
        wait_actions = [a for a in available_actions if a['action'] == 'wait']
        if wait_actions:
            actions_to_perform.append(wait_actions[0])
            print("   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ")
        else:
            # –§–æ–ª–±—ç–∫ - —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            actions_to_perform.append(random.choice(available_actions))
            print("   üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    print(f"   üìä –í—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(actions_to_perform)}")
    return actions_to_perform

def evaluate_node_for_network_growth(node_id: str, node_data: dict, nodes: dict, player_nodes: list) -> float:
    """
    –û—Ü–µ–Ω–∫–∞ –Ω–æ–¥—ã –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 100
    """
    score = 0.0
    
    # 1. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç hub (—á–µ–º –±–ª–∏–∂–µ, —Ç–µ–º –ª—É—á—à–µ)
    hub_distance = calculate_distance_from_hub(node_id, nodes)
    if hub_distance <= 1:
        score += 30  # –°–æ—Å–µ–¥–Ω–∏–µ —Å hub –Ω–æ–¥—ã
    elif hub_distance == 2:
        score += 20  # –ù–æ–¥—ã –≤ 2 —à–∞–≥–∞—Ö
    elif hub_distance == 3:
        score += 10  # –ù–æ–¥—ã –≤ 3 —à–∞–≥–∞—Ö
    else:
        score += 5   # –î–∞–ª—å–Ω–∏–µ –Ω–æ–¥—ã
    
    # 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –Ω–æ–¥ –∏–≥—Ä–æ–∫–∞
    neighbors = node_data.get('neighbors', [])
    player_neighbors = sum(1 for n in neighbors 
                          if nodes.get(n, {}).get('owner') == 'player')
    score += player_neighbors * 15  # –ö–∞–∂–¥—ã–π —Å–æ—Å–µ–¥ +15 –æ—á–∫–æ–≤
    
    # 3. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –Ω–æ–¥ –º–æ–∂–Ω–æ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å)
    expansion_potential = 0
    for neighbor in neighbors:
        if nodes.get(neighbor, {}).get('owner') == 'neutral':
            expansion_potential += 1
    score += expansion_potential * 10
    
    # 4. –¢–∏–ø –Ω–æ–¥—ã
    node_type = node_data.get('type', 'data')
    if node_type == 'cpu_node':
        score += 25  # CPU –Ω–æ–¥—ã –≤–∞–∂–Ω—ã –¥–ª—è overclocker
    elif node_type == 'data_cache':
        score += 15  # Data cache –Ω–æ–¥—ã –ø–æ–ª–µ–∑–Ω—ã
    
    # 5. –®—Ç—Ä–∞—Ñ –∑–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
    resistance = node_data.get('resistance', 50)
    score -= resistance * 0.5
    
    return max(0, score)

def calculate_distance_from_hub(node_id: str, nodes: dict) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç hub –¥–æ –Ω–æ–¥—ã"""
    if node_id == 'hub':
        return 0
    
    # –ü—Ä–æ—Å—Ç–æ–π BFS –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏
    visited = set()
    queue = [('hub', 0)]
    
    while queue:
        current_node, distance = queue.pop(0)
        
        if current_node == node_id:
            return distance
        
        if current_node in visited:
            continue
            
        visited.add(current_node)
        current_node_data = nodes.get(current_node, {})
        neighbors = current_node_data.get('neighbors', [])
        
        for neighbor in neighbors:
            if neighbor not in visited:
                queue.append((neighbor, distance + 1))
    
    return 999  # –ù–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞—è –Ω–æ–¥–∞

def analyze_agent_strategy(agent_file: str = 'best_agent.pkl'):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞–≥–µ–Ω—Ç–∞"""
    
    if not os.path.exists(agent_file):
        print(f"‚ùå –§–∞–π–ª –∞–≥–µ–Ω—Ç–∞ {agent_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    with open(agent_file, 'rb') as f:
        agent = pickle.load(f)
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–≥–µ–Ω—Ç–∞ –∏–∑ {agent_file}")
    print("-" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–æ–º
    genome = agent.genome
    print(f"üß¨ –†–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞: {len(genome)}")
    print(f"üìà –§–∏—Ç–Ω–µ—Å –∞–≥–µ–Ω—Ç–∞: {agent.fitness:.2f}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print("\nüìä –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
    print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π trace: {abs(genome[0]) * 200:.1f}")
    print(f"   –í—ã—Å–æ–∫–∏–π trace: {abs(genome[1]) * 150:.1f}")
    print(f"   –ü–æ—Ä–æ–≥ DP: {abs(genome[2]) * 50:.1f}")
    print(f"   –ü–æ—Ä–æ–≥ CPU: {abs(genome[3]) * 100:.1f}")
    print(f"   –ú–∞–∫—Å –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ —Ö–æ–¥: {int(abs(genome[15]) * 5) + 1}")
    
    print(f"\nüéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:")
    print(f"   –ó–∞—â–∏—Ç–∞: {genome[16]:.3f}")
    print(f"   –≠–∫–æ–Ω–æ–º–∏–∫–∞: {genome[17]:.3f}")
    print(f"   –ê–≥—Ä–µ—Å—Å–∏—è: {genome[18]:.3f}")
    
    print(f"\n‚öñÔ∏è –í–µ—Å–∞ –¥–µ–π—Å—Ç–≤–∏–π:")
    action_names = ['Miner', 'Sentry', 'Overclocker', 'Upgrade', 'Network', 'EMP', 'Wait']
    action_weights = [genome[8], genome[9], genome[10], genome[11], genome[12], genome[13], genome[14]]
    
    for name, weight in zip(action_names, action_weights):
        preference = "–ü–û–ó–ò–¢–ò–í–ù–û–ï" if weight > 0 else "–ù–ï–ì–ê–¢–ò–í–ù–û–ï"
        print(f"   {name}: {preference} ({weight:.3f})")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == 'test':
            games_count = int(sys.argv[2]) if len(sys.argv) > 2 else 10
            test_agent(games_count=games_count)
        
        elif command == 'analyze':
            analyze_agent_strategy()
        
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python test_agent.py test [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∏–≥—Ä]")
            print("  python test_agent.py analyze")
    
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        test_agent()

if __name__ == "__main__":
    main() 