#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
"""

import json
import os
import numpy as np

def analyze_enhanced_logs():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    print("üìä –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –£–õ–£–ß–®–ï–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
    log_files = [f for f in os.listdir('.') if f.startswith('enhanced_log_') and f.endswith('.jsonl')]
    
    if not log_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
    latest_log = max(log_files)
    print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {latest_log}")
    
    # –ß–∏—Ç–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
    episodes = {}
    actions = []
    rewards = []
    
    with open(latest_log, 'r') as f:
        for line in f:
            try:
                data = json.loads(line.strip())
                if data.get('type') == 'action':
                    episode = data['episode']
                    step = data['step']
                    action = data['chosen_action']['action']
                    enhanced_reward = data.get('enhanced_reward', 0)
                    
                    actions.append(action)
                    rewards.append(enhanced_reward)
                    
                    if episode not in episodes:
                        episodes[episode] = {
                            'steps': [],
                            'rewards': [],
                            'actions': []
                        }
                    
                    episodes[episode]['steps'].append(step)
                    episodes[episode]['rewards'].append(enhanced_reward)
                    episodes[episode]['actions'].append(action)
                    
            except json.JSONDecodeError:
                continue
    
    if not episodes:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥–æ–≤")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:")
    print(f"  üéÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {len(episodes)}")
    print(f"  ‚ö° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(actions)}")
    print(f"  üéØ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {np.mean(rewards):.3f}")
    print(f"  üìä –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: {np.mean([len(ep['steps']) for ep in episodes.values()]):.1f}")
    print(f"  üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: {max([len(ep['steps']) for ep in episodes.values()])}")
    print(f"  üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: {min([len(ep['steps']) for ep in episodes.values()])}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ –¥–µ–π—Å—Ç–≤–∏–π
    action_counts = {}
    for action in actions:
        action_counts[action] = action_counts.get(action, 0) + 1
    
    print("üéÆ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π:")
    total_actions = len(actions)
    for action, count in sorted(action_counts.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / total_actions) * 100
        print(f"  {action}: {count} ({percentage:.1f}%)")
    
    print()
    
    # –ê–Ω–∞–ª–∏–∑ —ç–ø–∏–∑–æ–¥–æ–≤
    print("üìä –ê–Ω–∞–ª–∏–∑ —ç–ø–∏–∑–æ–¥–æ–≤:")
    for episode_num in sorted(episodes.keys()):
        episode = episodes[episode_num]
        total_reward = sum(episode['rewards'])
        avg_reward = np.mean(episode['rewards'])
        length = len(episode['steps'])
        print(f"  –≠–ø–∏–∑–æ–¥ {episode_num}: {length} —à–∞–≥–æ–≤, –Ω–∞–≥—Ä–∞–¥–∞={total_reward:.1f}, —Å—Ä–µ–¥–Ω—è—è={avg_reward:.2f}")
    
    print()
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    analyze_enhanced_logs() 