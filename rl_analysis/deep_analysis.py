#!/usr/bin/env python3
"""
–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ RL-–æ–±—É—á–µ–Ω–∏–∏
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict

def analyze_patterns(csv_file='analysis_log.csv'):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–±—É—á–µ–Ω–∏—è"""
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv(csv_file, header=None, names=[
        'episode_id', 'stage', 'result', 'reward', 'steps', 'trace',
        'program_counts', 'avg_levels', 'enemies_killed', 'total_dp', 'total_cpu'
    ])
    
    print("üîç –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —ç—Ç–∞–ø–∞–º
    for stage in sorted(df['stage'].unique()):
        stage_data = df[df['stage'] == stage]
        print(f"\nüéØ –≠—Ç–∞–ø {stage}:")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä–∞–¥
        rewards = stage_data['reward'].values
        print(f"   –ù–∞–≥—Ä–∞–¥—ã: –º–∏–Ω={rewards.min():.2f}, –º–∞–∫—Å={rewards.max():.2f}, —Å—Ä–µ–¥–Ω–µ–µ={rewards.mean():.2f}, —Å—Ç–¥={rewards.std():.2f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞–≥–æ–≤
        steps = stage_data['steps'].values
        print(f"   –®–∞–≥–∏: –º–∏–Ω={steps.min()}, –º–∞–∫—Å={steps.max()}, —Å—Ä–µ–¥–Ω–µ–µ={steps.mean():.1f}, —Å—Ç–¥={steps.std():.1f}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
        dp_values = stage_data['total_dp'].values
        cpu_values = stage_data['total_cpu'].values
        print(f"   DP: —Å—Ä–µ–¥–Ω–µ–µ={dp_values.mean():.1f}, —Å—Ç–¥={dp_values.std():.1f}")
        print(f"   CPU: —Å—Ä–µ–¥–Ω–µ–µ={cpu_values.mean():.1f}, —Å—Ç–¥={cpu_values.std():.1f}")
        
        # –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π
        find_anomalies(stage_data, stage)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    analyze_transitions(df)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    analyze_correlations(df)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
    create_detailed_plots(df)

def find_anomalies(stage_data, stage):
    """–ù–∞—Ö–æ–¥–∏—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    
    print(f"\n   üîç –ê–Ω–æ–º–∞–ª–∏–∏ –Ω–∞ —ç—Ç–∞–ø–µ {stage}:")
    
    # –ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
    high_rewards = stage_data[stage_data['reward'] > stage_data['reward'].quantile(0.95)]
    if len(high_rewards) > 0:
        print(f"     –í—ã—Å–æ–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã (>95%): {len(high_rewards)} —ç–ø–∏–∑–æ–¥–æ–≤")
        for _, row in high_rewards.iterrows():
            print(f"       –ù–∞–≥—Ä–∞–¥–∞: {row['reward']:.2f}, —à–∞–≥–∏: {row['steps']}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {row['result']}")
    
    # –ê–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
    low_rewards = stage_data[stage_data['reward'] < stage_data['reward'].quantile(0.05)]
    if len(low_rewards) > 0:
        print(f"     –ù–∏–∑–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã (<5%): {len(low_rewards)} —ç–ø–∏–∑–æ–¥–æ–≤")
        for _, row in low_rewards.iterrows():
            print(f"       –ù–∞–≥—Ä–∞–¥–∞: {row['reward']:.2f}, —à–∞–≥–∏: {row['steps']}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {row['result']}")
    
    # –ê–Ω–æ–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–µ/–¥–ª–∏–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã
    short_episodes = stage_data[stage_data['steps'] < stage_data['steps'].quantile(0.05)]
    long_episodes = stage_data[stage_data['steps'] > stage_data['steps'].quantile(0.95)]
    
    if len(short_episodes) > 0:
        print(f"     –ö–æ—Ä–æ—Ç–∫–∏–µ —ç–ø–∏–∑–æ–¥—ã (<5%): {len(short_episodes)} —ç–ø–∏–∑–æ–¥–æ–≤")
    if len(long_episodes) > 0:
        print(f"     –î–ª–∏–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã (>95%): {len(long_episodes)} —ç–ø–∏–∑–æ–¥–æ–≤")

def analyze_transitions(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    
    print(f"\nüîÑ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    results = df['result'].value_counts()
    print(f"   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    for result, count in results.items():
        percentage = count / len(df) * 100
        print(f"     {result}: {count} ({percentage:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    if len(df) > 10:
        recent_results = df.tail(10)['result'].values
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {list(recent_results)}")
        
        # –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        win_streaks = 0
        loss_streaks = 0
        current_streak = 1
        
        for i in range(1, len(recent_results)):
            if recent_results[i] == recent_results[i-1]:
                current_streak += 1
            else:
                if recent_results[i-1] == 'win':
                    win_streaks = max(win_streaks, current_streak)
                else:
                    loss_streaks = max(loss_streaks, current_streak)
                current_streak = 1
        
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {win_streaks}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏–π: {loss_streaks}")

def analyze_correlations(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    print(f"\nüìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:")
    
    # –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    numeric_cols = ['reward', 'steps', 'total_dp', 'total_cpu']
    numeric_data = df[numeric_cols].copy()
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    corr_matrix = numeric_data.corr()
    
    print("   –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:")
    for i, col1 in enumerate(numeric_cols):
        for j, col2 in enumerate(numeric_cols):
            if i < j:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                corr = corr_matrix.loc[col1, col2]
                print(f"     {col1} ‚Üî {col2}: {corr:.3f}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —ç—Ç–∞–ø–∞–º
    for stage in sorted(df['stage'].unique()):
        stage_data = df[df['stage'] == stage]
        if len(stage_data) > 5:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            stage_corr = stage_data[numeric_cols].corr()
            print(f"\n   –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–∞ —ç—Ç–∞–ø–µ {stage}:")
            reward_steps_corr = stage_corr.loc['reward', 'steps']
            print(f"     –ù–∞–≥—Ä–∞–¥–∞ ‚Üî –®–∞–≥–∏: {reward_steps_corr:.3f}")

def create_detailed_plots(df):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ RL-–æ–±—É—á–µ–Ω–∏—è', fontsize=16)
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –ø–æ —ç—Ç–∞–ø–∞–º
    for stage in sorted(df['stage'].unique()):
        stage_data = df[df['stage'] == stage]
        axes[0, 0].hist(stage_data['reward'], alpha=0.7, label=f'–≠—Ç–∞–ø {stage}', bins=20)
    axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –ø–æ —ç—Ç–∞–ø–∞–º')
    axes[0, 0].set_xlabel('–ù–∞–≥—Ä–∞–¥–∞')
    axes[0, 0].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    axes[0, 0].legend()
    axes[0, 0].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –ù–∞–≥—Ä–∞–¥–∞ vs –®–∞–≥–∏
    for stage in sorted(df['stage'].unique()):
        stage_data = df[df['stage'] == stage]
        axes[0, 1].scatter(stage_data['steps'], stage_data['reward'], alpha=0.6, label=f'–≠—Ç–∞–ø {stage}')
    axes[0, 1].set_title('–ù–∞–≥—Ä–∞–¥–∞ vs –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤')
    axes[0, 1].set_xlabel('–®–∞–≥–∏')
    axes[0, 1].set_ylabel('–ù–∞–≥—Ä–∞–¥–∞')
    axes[0, 1].legend()
    axes[0, 1].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ù–∞–≥—Ä–∞–¥–∞ vs –†–µ—Å—É—Ä—Å—ã
    axes[0, 2].scatter(df['total_dp'], df['reward'], alpha=0.6, c=df['stage'], cmap='viridis')
    axes[0, 2].set_title('–ù–∞–≥—Ä–∞–¥–∞ vs Data Points')
    axes[0, 2].set_xlabel('Data Points')
    axes[0, 2].set_ylabel('–ù–∞–≥—Ä–∞–¥–∞')
    axes[0, 2].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞–≥—Ä–∞–¥
    window = 10
    rewards = df['reward'].values
    moving_avg = []
    for i in range(len(rewards)):
        start = max(0, i - window + 1)
        moving_avg.append(rewards[start:i+1].mean())
    
    axes[1, 0].plot(rewards, alpha=0.6, label='–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —ç–ø–∏–∑–æ–¥')
    axes[1, 0].plot(moving_avg, 'r-', linewidth=2, label=f'–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ ({window})')
    axes[1, 0].set_title('–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–≥—Ä–∞–¥')
    axes[1, 0].set_xlabel('–≠–ø–∏–∑–æ–¥')
    axes[1, 0].set_ylabel('–ù–∞–≥—Ä–∞–¥–∞')
    axes[1, 0].legend()
    axes[1, 0].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 5: Box plot –Ω–∞–≥—Ä–∞–¥ –ø–æ —ç—Ç–∞–ø–∞–º
    stage_rewards = [df[df['stage'] == stage]['reward'].values for stage in sorted(df['stage'].unique())]
    axes[1, 1].boxplot(stage_rewards, labels=[f'–≠—Ç–∞–ø {stage}' for stage in sorted(df['stage'].unique())])
    axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –ø–æ —ç—Ç–∞–ø–∞–º')
    axes[1, 1].set_ylabel('–ù–∞–≥—Ä–∞–¥–∞')
    axes[1, 1].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 6: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç–ø–∏–∑–æ–¥–∞–º
    results_numeric = (df['result'] == 'win').astype(int)
    axes[1, 2].plot(results_numeric, alpha=0.7, marker='o', markersize=3)
    axes[1, 2].set_title('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç–ø–∏–∑–æ–¥–∞–º (1=–ü–æ–±–µ–¥–∞, 0=–ü–æ—Ä–∞–∂–µ–Ω–∏–µ)')
    axes[1, 2].set_xlabel('–≠–ø–∏–∑–æ–¥')
    axes[1, 2].set_ylabel('–†–µ–∑—É–ª—å—Ç–∞—Ç')
    axes[1, 2].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('deep_analysis.png', dpi=300, bbox_inches='tight')
    print(f"\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'deep_analysis.png'")
    plt.show()

def suggest_improvements(df):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    total_episodes = len(df)
    wins = len(df[df['result'] == 'win'])
    win_rate = wins / total_episodes * 100
    
    print(f"   –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"     –í—Å–µ–≥–æ —ç–ø–∏–∑–æ–¥–æ–≤: {total_episodes}")
    print(f"     –ü–æ–±–µ–¥: {wins} ({win_rate:.1f}%)")
    
    if win_rate < 10:
        print(f"   ‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ ({win_rate:.1f}%)")
        print(f"     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"       - –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
        print(f"       - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å shaping rewards")
        print(f"       - –£–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö")
    
    # –ê–Ω–∞–ª–∏–∑ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    reward_std = df['reward'].std()
    reward_mean = df['reward'].mean()
    cv = reward_std / abs(reward_mean) if reward_mean != 0 else 0
    
    if cv > 0.5:
        print(f"   ‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (CV={cv:.2f})")
        print(f"     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"       - –£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print(f"       - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—é")
        print(f"       - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —ç—Ç–∞–ø–∞–º
    for stage in sorted(df['stage'].unique()):
        stage_data = df[df['stage'] == stage]
        stage_wins = len(stage_data[stage_data['result'] == 'win'])
        stage_win_rate = stage_wins / len(stage_data) * 100
        
        print(f"   –≠—Ç–∞–ø {stage}: {stage_win_rate:.1f}% –ø–æ–±–µ–¥")
        if stage_win_rate == 0:
            print(f"     ‚ùå –ù–µ—Ç –ø–æ–±–µ–¥ –Ω–∞ —ç—Ç–∞–ø–µ {stage}")
            print(f"       - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å —ç—Ç–∞–ø–∞")
            print(f"       - –£–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è")
        elif stage_win_rate == 100:
            print(f"     ‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —ç—Ç–∞–ø–µ {stage}")
            print(f"       - –ú–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")

if __name__ == "__main__":
    try:
        df = analyze_patterns()
        suggest_improvements(df)
        
        print(f"\n‚úÖ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª analysis_log.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ train.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}") 