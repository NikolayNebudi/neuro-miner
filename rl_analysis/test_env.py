#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è Network Echo –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º
"""

import sys
import os
import time
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from network_echo_env import NetworkEchoEnv

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Network Echo...")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        env = NetworkEchoEnv()
        print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞...")
        obs = env.reset()
        print(f"‚úÖ –°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –†–∞–∑–º–µ—Ä –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {obs.shape}")
        print(f"   –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: DP={env.game_state.get('dp')}, CPU={env.game_state.get('cpu')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π...")
        for step in range(10):
            action = env.action_space.sample()
            obs, reward, done, info = env.step(action)
            
            print(f"   –®–∞–≥ {step+1}: –¥–µ–π—Å—Ç–≤–∏–µ={info['action']}, –Ω–∞–≥—Ä–∞–¥–∞={reward:.2f}")
            print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: DP={info['stats'].get('dp')}, CPU={info['stats'].get('cpu')}, Trace={info['stats'].get('traceLevel')}")
            
            if done:
                print(f"   –≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω –Ω–∞ —à–∞–≥–µ {step+1}")
                break
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤...")
        print(f"   –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: {env.action_space}")
        print(f"   –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {env.observation_space}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
        print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π...")
        obs_min = np.min(obs)
        obs_max = np.max(obs)
        print(f"   –î–∏–∞–ø–∞–∑–æ–Ω –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: [{obs_min:.3f}, {obs_max:.3f}]")
        
        if obs_min >= 0 and obs_max <= 1:
            print("‚úÖ –ù–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ö†Ô∏è  –ù–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ø–∏–∑–æ–¥–æ–≤
        print("6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–ø–∏–∑–æ–¥–æ–≤...")
        episode_rewards = []
        episode_lengths = []
        
        for episode in range(3):
            obs = env.reset()
            total_reward = 0
            steps = 0
            done = False
            
            while not done and steps < 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —ç–ø–∏–∑–æ–¥–∞
                action = env.action_space.sample()
                obs, reward, done, info = env.step(action)
                total_reward += reward
                steps += 1
            
            episode_rewards.append(total_reward)
            episode_lengths.append(steps)
            print(f"   –≠–ø–∏–∑–æ–¥ {episode+1}: –Ω–∞–≥—Ä–∞–¥–∞={total_reward:.2f}, —à–∞–≥–∏={steps}")
        
        print(f"   –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {np.mean(episode_rewards):.2f}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {np.mean(episode_lengths):.1f}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        print("7. –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        env.close()
        print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —É—Å–ø–µ—à–Ω–æ")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_action_encoding():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π...")
    
    try:
        env = NetworkEchoEnv()
        obs = env.reset()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        possible_actions = env._send_command({
            'cmd': 'get_actions',
            'state': env.game_state
        })
        
        if 'actions' in possible_actions:
            actions = possible_actions['actions']
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(actions)}")
            
            for i, action in enumerate(actions[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   –î–µ–π—Å—Ç–≤–∏–µ {i}: {action}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            for i in range(min(10, len(actions))):
                encoded_action = env._encode_action(i)
                print(f"   –ò–Ω–¥–µ–∫—Å {i} -> {encoded_action}")
        
        env.close()
        print("‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π: {e}")

def test_observation_encoding():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π"""
    print("\nüëÅÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π...")
    
    try:
        env = NetworkEchoEnv()
        obs = env.reset()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
        print(f"   –†–∞–∑–º–µ—Ä –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {obs.shape}")
        print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {obs.dtype}")
        print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: [{np.min(obs):.3f}, {np.max(obs):.3f}]")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        print("   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:")
        print(f"     –†–µ—Å—É—Ä—Å—ã (0-4): {obs[:5]}")
        print(f"     –ù–æ–¥—ã (5-9): {obs[5:10]}")
        print(f"     –ü—Ä–æ–≥—Ä–∞–º–º—ã (10-13): {obs[10:14]}")
        print(f"     –í—Ä–∞–≥–∏ (14-16): {obs[14:17]}")
        print(f"     –ó–∞—Ö–≤–∞—Ç —Å–µ—Ç–∏ (17-18): {obs[17:19]}")
        
        env.close()
        print("‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è Network Echo")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success = test_environment()
    
    if success:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        test_action_encoding()
        test_observation_encoding()
        
        print("\n" + "=" * 50)
        print("üéØ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ–±—É—á–µ–Ω–∏—é!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_network_echo.py")
    else:
        print("\n" + "=" * 50)
        print("‚ùå –û–∫—Ä—É–∂–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º")
        sys.exit(1) 