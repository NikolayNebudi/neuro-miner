#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –æ–≥—Ä–æ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ä–∞–∑–º–µ—Ä–∞
"""

import json
import os
from collections import defaultdict, Counter
import sys

def analyze_log_structure(log_file):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–æ–≥-—Ñ–∞–π–ª–∞"""
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {log_file}")
    print("=" * 60)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞
    file_size = os.path.getsize(log_file) / (1024 * 1024 * 1024)  # GB
    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} GB")
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫
    with open(log_file, 'r') as f:
        lines = f.readlines()
        total_lines = len(lines)
    
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {total_lines:,}")
    print(f"üìè –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {file_size * 1024 * 1024 * 1024 / total_lines:.0f} –±–∞–π—Ç")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
    print(f"\nüìã –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
    
    # –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏
    print(f"\nüî∏ –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏:")
    for i in range(min(3, len(lines))):
        try:
            data = json.loads(lines[i])
            episode = data.get('episode', 'N/A')
            step = data.get('step', 'N/A')
            action = data.get('chosen_action', {}).get('action', 'N/A')
            print(f"  {i+1}. –≠–ø–∏–∑–æ–¥ {episode}, –®–∞–≥ {step}, –î–µ–π—Å—Ç–≤–∏–µ: {action}")
        except:
            print(f"  {i+1}. –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    print(f"\nüî∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏:")
    for i in range(max(0, len(lines)-3), len(lines)):
        try:
            data = json.loads(lines[i])
            episode = data.get('episode', 'N/A')
            step = data.get('step', 'N/A')
            action = data.get('chosen_action', {}).get('action', 'N/A')
            print(f"  {len(lines)-i}. –≠–ø–∏–∑–æ–¥ {episode}, –®–∞–≥ {step}, –î–µ–π—Å—Ç–≤–∏–µ: {action}")
        except:
            print(f"  {len(lines)-i}. –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")
    
    # –ü–æ–¥—Å—á–µ—Ç —ç–ø–∏–∑–æ–¥–æ–≤
    episodes = set()
    actions = Counter()
    steps_per_episode = defaultdict(int)
    
    print("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏...")
    for i, line in enumerate(lines):
        if i % 10000 == 0:
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i:,} —Å—Ç—Ä–æ–∫...")
        
        try:
            data = json.loads(line)
            episode = data.get('episode', 0)
            step = data.get('step', 0)
            action = data.get('chosen_action', {}).get('action', 'unknown')
            
            episodes.add(episode)
            actions[action] += 1
            steps_per_episode[episode] = max(steps_per_episode[episode], step)
            
        except json.JSONDecodeError:
            continue
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}: {e}")
            continue
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"  üéÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {len(episodes)}")
    print(f"  üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: {sum(actions.values()):,}")
    print(f"  üìä –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: {sum(steps_per_episode.values()) / len(episodes):.0f} —à–∞–≥–æ–≤")
    
    print(f"\nüéØ –¢–æ–ø-10 –¥–µ–π—Å—Ç–≤–∏–π:")
    for action, count in actions.most_common(10):
        percentage = count / sum(actions.values()) * 100
        print(f"  {action}: {count:,} ({percentage:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüíæ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
    
    # –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
    if lines:
        sample_size = len(lines[0].encode('utf-8'))
        print(f"  üìè –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏: ~{sample_size:,} –±–∞–π—Ç")
        print(f"  üìä –†–∞–∑–º–µ—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: ~{sample_size * len(lines) / (1024*1024*1024):.2f} GB")
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–º–µ—Ä–æ–º
    print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–º–µ—Ä–æ–º:")
    print(f"  üî¥ –ö–∞–∂–¥—ã–π —à–∞–≥ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é")
    print(f"  üî¥ –ü–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏")
    print(f"  üî¥ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏")
    print(f"  üî¥ 357,750 –∑–∞–ø–∏—Å–µ–π √ó ~70KB = ~23GB")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print(f"  ‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π")
    print(f"  ‚úÖ –°–∂–∏–º–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    print(f"  ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    print(f"  ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    print(f"  ‚úÖ –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    log_file = "actions_log.jsonl"
    
    if not os.path.exists(log_file):
        print(f"‚ùå –§–∞–π–ª {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    analyze_log_structure(log_file)

if __name__ == "__main__":
    main() 