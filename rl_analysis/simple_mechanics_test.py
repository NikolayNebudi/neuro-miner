#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏ Network Echo
"""

import gymnasium as gym
from network_echo_env_improved import NetworkEchoEnvImproved
import numpy as np
import time

def test_basic_mechanics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏ –∏–≥—Ä—ã"""
    
    print("üéÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–û–ô –ú–ï–•–ê–ù–ò–ö–ò")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    config = {
        'mode': 'full',
        'stage': 0,
        'reduce_randomness': True,
        'improved_rewards': True,
        'curriculum_learning': True
    }
    
    env = NetworkEchoEnvImproved(config=config)
    
    print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    obs, info = env.reset()
    print(f"‚úÖ –°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –†–∞–∑–º–µ—Ä –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {len(obs)}")
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"  ‚Ä¢ DP: {obs[0]:.2f}")
    print(f"  ‚Ä¢ CPU: {obs[1]:.2f}")
    print(f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏: {obs[12]:.2f}")
    print(f"  ‚Ä¢ –í—Ä–∞–≥–∏: {obs[14]:.0f}")
    print(f"  ‚Ä¢ –£–∑–ª—ã: {obs[15]:.0f}/{obs[16]:.0f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π...")
    
    actions_to_test = [0, 1, 6, 11, 12, 13]  # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    action_names = ["–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è", "–ö—É–ø–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É 1", "–ê–ø–≥—Ä–µ–π–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã 1", 
                   "–ê—Ç–∞–∫–∞", "–ó–∞—Ö–≤–∞—Ç —É–∑–ª–∞", "–ó–∞—Ö–≤–∞—Ç —Å–µ—Ç–∏"]
    
    for i, (action, name) in enumerate(zip(actions_to_test, action_names)):
        print(f"\n  –¢–µ—Å—Ç {i+1}: {name} (–¥–µ–π—Å—Ç–≤–∏–µ {action})")
        
        try:
            obs, reward, terminated, truncated, info = env.step(action)
            print(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ. –ù–∞–≥—Ä–∞–¥–∞: {reward:.3f}")
            print(f"    üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: DP={obs[0]:.1f}, CPU={obs[1]:.1f}, –ü—Ä–æ–≥—Ä–∞–º–º—ã=[{obs[7]:.0f},{obs[8]:.0f},{obs[9]:.0f},{obs[10]:.0f},{obs[11]:.0f}]")
            
            if terminated:
                print(f"    üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {info.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                break
                
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
            break
    
    env.close()
    print("\n‚úÖ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def test_episode_completion():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞"""
    
    print("\nüéÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø –≠–ü–ò–ó–û–î–ê")
    print("=" * 40)
    
    config = {
        'mode': 'full',
        'stage': 0,
        'reduce_randomness': True,
        'improved_rewards': True,
        'curriculum_learning': True
    }
    
    env = NetworkEchoEnvImproved(config=config)
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞
    obs, info = env.reset()
    step = 0
    total_reward = 0
    max_steps = 50  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    
    print("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    while step < max_steps:
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–∫—É–ø–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∞—Ç–∞–∫—É–µ–º
        if obs[0] >= 10 and obs[7] == 0:
            action = 1  # –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É 1
        elif obs[0] >= 15 and obs[8] == 0:
            action = 2  # –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É 2
        elif obs[14] > 0:
            action = 11  # –ê—Ç–∞–∫—É–µ–º –≤—Ä–∞–≥–æ–≤
        elif obs[15] < obs[16]:
            action = 12  # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —É–∑–ª—ã
        else:
            action = 0  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        
        try:
            obs, reward, terminated, truncated, info = env.step(action)
            total_reward += reward
            step += 1
            
            if step % 10 == 0:
                print(f"  –®–∞–≥ {step}: DP={obs[0]:.1f}, CPU={obs[1]:.1f}, –ù–∞–≥—Ä–∞–¥–∞={total_reward:.1f}")
            
            if terminated or truncated:
                break
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step}: {e}")
            break
    
    env.close()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  ‚Ä¢ –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {step}")
    print(f"  ‚Ä¢ –û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {total_reward:.3f}")
    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {total_reward/max(1, step):.3f}")
    print(f"  ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {info.get('reason', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è')}")

def test_different_modes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∏–≥—Ä—ã"""
    
    print("\nüéÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ù–´–• –†–ï–ñ–ò–ú–û–í")
    print("=" * 40)
    
    modes = [
        ('economy_tutorial', '–≠–∫–æ–Ω–æ–º–∏–∫–∞ (–æ–±—É—á–µ–Ω–∏–µ)'),
        ('defense_tutorial', '–û–±–æ—Ä–æ–Ω–∞ (–æ–±—É—á–µ–Ω–∏–µ)'),
        ('full', '–ü–æ–ª–Ω–∞—è –∏–≥—Ä–∞')
    ]
    
    for mode, name in modes:
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞: {name}")
        
        config = {
            'mode': mode,
            'stage': 0,
            'reduce_randomness': True,
            'improved_rewards': True,
            'curriculum_learning': True
        }
        
        try:
            env = NetworkEchoEnvImproved(config=config)
            obs, info = env.reset()
            
            print(f"  ‚úÖ –†–µ–∂–∏–º {mode} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"  üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: DP={obs[0]:.1f}, CPU={obs[1]:.1f}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤
            for i in range(5):
                action = 0  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                obs, reward, terminated, truncated, info = env.step(action)
                if terminated or truncated:
                    break
            
            env.close()
            print(f"  ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ {mode}: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üéÆ –ü–†–û–°–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–•–ê–ù–ò–ö–ò NETWORK ECHO")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É
        test_basic_mechanics()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞
        test_episode_completion()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã
        test_different_modes()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ú–µ—Ö–∞–Ω–∏–∫–∞ –∏–≥—Ä—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main() 